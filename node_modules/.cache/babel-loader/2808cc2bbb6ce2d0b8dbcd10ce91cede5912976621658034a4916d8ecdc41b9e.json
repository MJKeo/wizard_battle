{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport { combatSystemPrompt, combatSystemPromptV2, combatUserPromptV2 } from \"./prompts/prompts\";\nimport BattleLogMessageType from \"./enums/battleLogMessageType\";\nimport ActionType from \"./enums/actionType\";\nimport SpellType from \"./enums/spellType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatActions = (wizard, currentMana) => {\n  var _wizard$all_actions, _wizard$all_actions2;\n  if (!wizard) {\n    return [];\n  }\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = (_wizard$all_actions = (_wizard$all_actions2 = wizard.all_actions) === null || _wizard$all_actions2 === void 0 ? void 0 : _wizard$all_actions2.call(wizard)) !== null && _wizard$all_actions !== void 0 ? _wizard$all_actions : [];\n  return actions.map((action, index) => {\n    var _action$display_card, _card$type, _card$mana_cost, _card$element, _card$description;\n    const card = (_action$display_card = action.display_card) === null || _action$display_card === void 0 ? void 0 : _action$display_card.call(action);\n    if (!card) {\n      return null;\n    }\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n    const type = String((_card$type = card.type) !== null && _card$type !== void 0 ? _card$type : \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${(_card$mana_cost = card.mana_cost) !== null && _card$mana_cost !== void 0 ? _card$mana_cost : \"?\"}`;\n    const emoji = type === \"DAMAGE\" ? \"💥\" : type === \"BUFF\" ? \"📈\" : type === \"DEBUFF\" ? \"📉\" : type === \"HEAL\" ? \"🍃\" : type === \"DEFENSE\" ? \"🛡️\" : \"\";\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = (_card$element = card.element) !== null && _card$element !== void 0 ? _card$element : null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = (_card$description = card.description) !== null && _card$description !== void 0 ? _card$description : \"\";\n    const cardClassName = [\"spell-card\", type === \"HEAL\" ? \"spell-card-heal\" : type === \"DEFENSE\" ? \"spell-card-defense\" : \"spell-card-spell\", !isAffordable ? \"spell-card--unavailable\" : null].filter(Boolean).join(\" \");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cardClassName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-left\",\n          children: [elementClass && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: elementClass,\n            children: elementLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__name\",\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta spell-card__meta--range\",\n            children: rangeLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: accuracyLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: manaCostLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), description && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row spell-card__row--description\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"spell-card__description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, `${card.name}-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  });\n};\nconst formatActiveEffects = wizardState => {\n  var _wizardState$active_e;\n  const effects = (_wizardState$active_e = wizardState.active_effects) !== null && _wizardState$active_e !== void 0 ? _wizardState$active_e : [];\n  if (!effects.length) {\n    return [{\n      text: \"(none)\",\n      title: \"\"\n    }];\n  }\n  return effects.map(effect => {\n    var _ref, _effect$remaining_tur, _ref2, _effect$effect_type, _ref3, _ref4, _effect$source_name, _effect$value, _effect$name2;\n    const rounds = (_ref = (_effect$remaining_tur = effect.remaining_turns) !== null && _effect$remaining_tur !== void 0 ? _effect$remaining_tur : effect.rounds_remaining) !== null && _ref !== void 0 ? _ref : 0;\n    const type = String((_ref2 = (_effect$effect_type = effect.effect_type) !== null && _effect$effect_type !== void 0 ? _effect$effect_type : effect.type) !== null && _ref2 !== void 0 ? _ref2 : \"\").toUpperCase();\n    const sourceName = (_ref3 = (_ref4 = (_effect$source_name = effect.source_name) !== null && _effect$source_name !== void 0 ? _effect$source_name : effect.source) !== null && _ref4 !== void 0 ? _ref4 : effect.name) !== null && _ref3 !== void 0 ? _ref3 : \"Effect\";\n    if (type === \"DEFENSE\" || effect.is_defense && typeof effect.is_defense === \"boolean\") {\n      var _effect$name;\n      return {\n        text: `🛡️ ${(_effect$name = effect.name) !== null && _effect$name !== void 0 ? _effect$name : \"Unknown\"} (${rounds})`,\n        title: sourceName\n      };\n    }\n    const effectValue = Number((_effect$value = effect.value) !== null && _effect$value !== void 0 ? _effect$value : 0) || 0;\n    const percent = `${(Math.round(effectValue * 1000) / 10).toFixed(1)}%`;\n    if (type === \"BUFF\" || effect.is_buff) {\n      return {\n        text: `📈 ${percent} (${rounds})`,\n        title: sourceName\n      };\n    }\n    if (type === \"DEBUFF\" || effect.is_debuff) {\n      return {\n        text: `📉 ${percent} (${rounds})`,\n        title: sourceName\n      };\n    }\n    return {\n      text: `${(_effect$name2 = effect.name) !== null && _effect$name2 !== void 0 ? _effect$name2 : \"Effect\"} (${rounds})`,\n      title: sourceName\n    };\n  });\n};\nconst StatCircles = ({\n  current,\n  max,\n  color\n}) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-horizontal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat-horizontal__meter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-horizontal__fill\",\n        style: {\n          width: `${percent * 100}%`,\n          backgroundColor: color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-horizontal__value\",\n          children: `${clampedCurrent}/${clampedMax}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_c = StatCircles;\nconst HorizontalStatBars = ({\n  state\n}) => {\n  const stats = [{\n    key: \"attack\",\n    label: \"Attack\",\n    color: \"#f87171\"\n  }, {\n    key: \"defense\",\n    label: \"Defense\",\n    color: \"#60a5fa\"\n  }, {\n    key: \"healing\",\n    label: \"Healing\",\n    color: \"#34d399\"\n  }, {\n    key: \"arcane\",\n    label: \"Arcane\",\n    color: \"#c084fc\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-bars\",\n    children: stats.map(({\n      key,\n      label,\n      color\n    }) => {\n      var _state$player$wizard$;\n      const rawValue = Math.min(1, Math.max(0, (_state$player$wizard$ = state.player.wizard[key]) !== null && _state$player$wizard$ !== void 0 ? _state$player$wizard$ : 0));\n      const percent = Math.round(rawValue * 100);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-meter\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-meter__fill\",\n            style: {\n              width: `${percent}%`,\n              backgroundColor: color\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-meter__value\",\n              children: [percent, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_c2 = HorizontalStatBars;\nconst BattleColumn = ({\n  actions,\n  wizardState\n}) => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: \"battle-column\",\n  children: [/*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"battle-column__header\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: wizardState.player.wizard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-column__content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__resource-bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Health\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_health,\n            max: wizardState.max_health,\n            color: \"#b91c1c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Mana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_mana,\n            max: 25,\n            color: \"#a855f7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__effects\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Active Effects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-effects__list\",\n          children: formatActiveEffects(wizardState).map(({\n            text,\n            title\n          }, index) => {\n            var _wizardState$active_e2, _wizardState$active_e3;\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              title: title,\n              children: [text, index < ((_wizardState$active_e2 = (_wizardState$active_e3 = wizardState.active_effects) === null || _wizardState$active_e3 === void 0 ? void 0 : _wizardState$active_e3.length) !== null && _wizardState$active_e2 !== void 0 ? _wizardState$active_e2 : 0) - 1 ? \", \" : \"\"]\n            }, `${text}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalStatBars, {\n          state: wizardState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"battle-section-title battle-section-title--spells\",\n        children: \"Spells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-cards\",\n        children: actions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 184,\n  columnNumber: 3\n}, this);\n_c3 = BattleColumn;\nconst Battle = ({\n  playerOneWizard,\n  playerTwoWizard,\n  onReset,\n  apiBaseUrl\n}) => {\n  _s();\n  var _playerStates$, _playerStates$2;\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n  const appendToLog = useCallback(entry => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog(prev => [entry, ...prev]);\n  }, []);\n  const fetchActionForCurrentActor = useCallback(async function fetchAction(autoExecute = false) {\n    var _currentState$player_, _currentState$player_2, _actingState$player$w, _actingState$player, _actingState$player$w2, _actingState$player$w3, _actingState$current_;\n    if (cancelledRef.current || winnerRef.current || isFetchingActionRef.current || pendingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    const actingIndex = actingIndexRef.current;\n    const actingState = (_currentState$player_ = currentState.player_states) === null || _currentState$player_ === void 0 ? void 0 : _currentState$player_[actingIndex];\n    const enemyState = (_currentState$player_2 = currentState.player_states) === null || _currentState$player_2 === void 0 ? void 0 : _currentState$player_2[1 - actingIndex];\n    if (!actingState || !enemyState) {\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: \"Invalid game state\"\n      });\n      return;\n    }\n    const validActions = (_actingState$player$w = (_actingState$player = actingState.player) === null || _actingState$player === void 0 ? void 0 : (_actingState$player$w2 = _actingState$player.wizard) === null || _actingState$player$w2 === void 0 ? void 0 : (_actingState$player$w3 = _actingState$player$w2.affordable_actions) === null || _actingState$player$w3 === void 0 ? void 0 : _actingState$player$w3.call(_actingState$player$w2, (_actingState$current_ = actingState.current_mana) !== null && _actingState$current_ !== void 0 ? _actingState$current_ : 0)) !== null && _actingState$player$w !== void 0 ? _actingState$player$w : [];\n    if (!validActions.length) {\n      var _currentState$increme, _currentState$get_win;\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: \"No valid actions available. Skipping turn.\"\n      });\n      const manaBefore = actingIndex === 1 ? currentState.player_states.map(state => state.current_mana) : null;\n      (_currentState$increme = currentState.increment_mana) === null || _currentState$increme === void 0 ? void 0 : _currentState$increme.call(currentState);\n      const updatedStates = [...currentState.player_states];\n      setPlayerStates(updatedStates);\n      if (actingIndex === 1 && manaBefore) {\n        const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n        appendToLog({\n          type: BattleLogMessageType.TURN_END,\n          message: `End turn ${turnRef.current}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`\n        });\n      }\n      actingIndexRef.current = 1 - actingIndex;\n      if (actingIndex === 1) {\n        turnRef.current += 1;\n      }\n      const winnerAfterSkip = (_currentState$get_win = currentState.get_winner) === null || _currentState$get_win === void 0 ? void 0 : _currentState$get_win.call(currentState);\n      if (winnerAfterSkip) {\n        winnerRef.current = winnerAfterSkip;\n        setWinner(winnerAfterSkip);\n        appendToLog({\n          type: BattleLogMessageType.WINNER,\n          message: `${winnerAfterSkip.name} wins!`\n        });\n        return;\n      }\n      return fetchAction(autoExecute);\n    }\n    setIsFetchingAction(true);\n    isFetchingActionRef.current = true;\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setGeneratingWizardName(actingState.player.wizard.name);\n    const controller = new AbortController();\n    controllerRef.current = controller;\n    try {\n      var _ref5, _selectedAction$name, _selectedAction$const;\n      const battleContext = currentState.compact_battle_context(actingIndex);\n      console.log(combatUserPromptV2(actingState.player.wizard, battleContext['actor_info'], battleContext['enemy_info']));\n      const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          system_prompt: combatSystemPromptV2(actingState.player.wizard),\n          user_prompt: currentState.battleSnapshot(actingIndex)\n        }),\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      const rawAction = data === null || data === void 0 ? void 0 : data.action_index;\n      const parsedIndex = typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n      if (!Number.isFinite(parsedIndex)) {\n        appendToLog({\n          type: BattleLogMessageType.ERROR,\n          message: `Invalid action index returned: ${JSON.stringify(data)}`\n        });\n        return;\n      }\n      const adjustedIndex = parsedIndex;\n      if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n        appendToLog({\n          type: BattleLogMessageType.ERROR,\n          message: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`\n        });\n        return;\n      }\n      const selectedAction = validActions[adjustedIndex];\n      const turnData = {\n        actingIndex,\n        turn: turnRef.current,\n        actingWizardName: actingState.player.wizard.name,\n        selectedAction,\n        actionName: (_ref5 = (_selectedAction$name = selectedAction === null || selectedAction === void 0 ? void 0 : selectedAction.name) !== null && _selectedAction$name !== void 0 ? _selectedAction$name : selectedAction === null || selectedAction === void 0 ? void 0 : (_selectedAction$const = selectedAction.constructor) === null || _selectedAction$const === void 0 ? void 0 : _selectedAction$const.name) !== null && _ref5 !== void 0 ? _ref5 : \"Action\"\n      };\n      pendingActionRef.current = turnData;\n      setPendingAction(turnData);\n      setShouldAutoResolve(autoExecute || autoProgressRef.current);\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\" || cancelledRef.current) {\n        return;\n      }\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: `Error during action generation: ${String(error)}`\n      });\n    } finally {\n      if (controllerRef.current === controller) {\n        controllerRef.current = null;\n      }\n      isFetchingActionRef.current = false;\n      setIsFetchingAction(false);\n      setGeneratingWizardName(null);\n    }\n  }, [appendToLog, setPlayerStates, setWinner]);\n  const executeAction = useCallback(actionData => {\n    if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    setShouldAutoResolve(false);\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setIsExecutingAction(true);\n    isExecutingActionRef.current = true;\n    let continueBattle = true;\n    try {\n      var _currentState$perform, _currentState$get_win2;\n      if (actionData.actingIndex === 0) {\n        appendToLog({\n          type: BattleLogMessageType.TURN_START,\n          message: `Turn ${actionData.turn}`\n        });\n      }\n      const announcement = (_currentState$perform = currentState.perform_action(actionData.actingIndex, actionData.selectedAction)) !== null && _currentState$perform !== void 0 ? _currentState$perform : \"\";\n      setPlayerStates([...currentState.player_states]);\n      var action_emoji = \"🪄\";\n      console.log(actionData.selectedAction.action_type);\n      switch (actionData.selectedAction.action_type.name) {\n        case \"HEAL\":\n          action_emoji = \"🍃\";\n          break;\n        case \"DEFEND\":\n          action_emoji = \"🛡️\";\n          break;\n        case \"CAST_SPELL\":\n          switch (actionData.selectedAction.spell_type) {\n            case SpellType.DAMAGE:\n              action_emoji = \"💥\";\n              break;\n            case SpellType.BUFF:\n              action_emoji = \"📈\";\n              break;\n            case SpellType.DEBUFF:\n              action_emoji = \"📉\";\n              break;\n          }\n          break;\n      }\n      appendToLog({\n        type: BattleLogMessageType.PLAYER_ACTION,\n        message: `${action_emoji} ${announcement}\\n`\n      });\n      // console.log(\"[Battle] Actor context:\", currentState.compact_battle_context(actionData.actingIndex));\n\n      const winnerAfterAction = (_currentState$get_win2 = currentState.get_winner) === null || _currentState$get_win2 === void 0 ? void 0 : _currentState$get_win2.call(currentState);\n      if (winnerAfterAction) {\n        winnerRef.current = winnerAfterAction;\n        continueBattle = false;\n        setWinner(winnerAfterAction);\n        appendToLog({\n          type: BattleLogMessageType.WINNER,\n          message: `${winnerAfterAction.name} wins!`\n        });\n      } else {\n        actingIndexRef.current = 1 - actionData.actingIndex;\n        if (actingIndexRef.current === 0) {\n          var _currentState$increme2;\n          const manaBefore = currentState.player_states.map(state => state.current_mana);\n          (_currentState$increme2 = currentState.increment_mana) === null || _currentState$increme2 === void 0 ? void 0 : _currentState$increme2.call(currentState);\n          const updatedStates = [...currentState.player_states];\n          setPlayerStates(updatedStates);\n          const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n          appendToLog({\n            type: BattleLogMessageType.TURN_END,\n            message: `End turn ${actionData.turn}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`\n          });\n          // console.log(\"[Battle] Post-turn context:\", currentState.compact_battle_context(actionData.actingIndex));\n          turnRef.current = actionData.turn + 1;\n        }\n      }\n    } catch (error) {\n      continueBattle = false;\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: `Action failed: ${String(error)}`\n      });\n    } finally {\n      setIsExecutingAction(false);\n      isExecutingActionRef.current = false;\n      if (continueBattle && !cancelledRef.current) {\n        fetchActionForCurrentActor(autoProgressRef.current);\n      }\n    }\n  }, [appendToLog, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n    fetchActionForCurrentActor(true);\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n  const handleNextMove = useCallback(() => {\n    if (!pendingAction || autoProgress || winner || isFetchingAction || isExecutingAction || cancelledRef.current) {\n      return;\n    }\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress(prev => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (actionData && !winnerRef.current && !isFetchingActionRef.current && !isExecutingActionRef.current) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n  const playerOneState = (_playerStates$ = playerStates[0]) !== null && _playerStates$ !== void 0 ? _playerStates$ : null;\n  const playerTwoState = (_playerStates$2 = playerStates[1]) !== null && _playerStates$2 !== void 0 ? _playerStates$2 : null;\n  const nextMoveDisabled = !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${autoProgress ? \"\" : \"button-outline\"}`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"battle-layout\",\n    children: [playerOneState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerOneState,\n      actions: formatActions(playerOneState.player.wizard, playerOneState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"battle-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prompt-button button-outline battle-reset\",\n        type: \"button\",\n        onClick: onReset,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prompt-button battle-controls__primary\",\n          type: \"button\",\n          onClick: handleNextMove,\n          disabled: nextMoveDisabled,\n          children: nextMoveLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: autoProgressButtonClass,\n          type: \"button\",\n          onClick: toggleAutoProgress,\n          disabled: autoProgressDisabled,\n          children: `Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-log__content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Battle Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this), autoProgress && isFetchingAction && generatingWizardName && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__status\",\n          children: `Generating ${generatingWizardName}'s move...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 13\n        }, this), battleLog.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__empty\",\n          children: isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 13\n        }, this) : battleLog.map((entry, index) => {\n          var entryClass = \"battle-log__entry\";\n          switch (entry.type) {\n            case BattleLogMessageType.PLAYER_ACTION:\n              entryClass = \"battle-log__entry\";\n              break;\n            case BattleLogMessageType.WINNER:\n              entryClass = \"battle-log__entry--WINNER\";\n              break;\n            case BattleLogMessageType.TURN_START:\n              entryClass = \"battle-log__entry--turn-start\";\n              break;\n            case BattleLogMessageType.TURN_END:\n              entryClass = \"battle-log__entry--turn-end\";\n              break;\n            case BattleLogMessageType.ERROR:\n              entryClass = \"battle-log__entry--error\";\n              break;\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: entryClass,\n              children: entry.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this), playerTwoState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerTwoState,\n      actions: formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 631,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"O6VjMgQo8i8PLpZzM/+Mw2cmQDQ=\");\n_c4 = Battle;\nexport default Battle;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatCircles\");\n$RefreshReg$(_c2, \"HorizontalStatBars\");\n$RefreshReg$(_c3, \"BattleColumn\");\n$RefreshReg$(_c4, \"Battle\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","GameState","combatSystemPrompt","combatSystemPromptV2","combatUserPromptV2","BattleLogMessageType","ActionType","SpellType","jsxDEV","_jsxDEV","formatActions","wizard","currentMana","_wizard$all_actions","_wizard$all_actions2","availableMana","Number","isFinite","actions","all_actions","call","map","action","index","_action$display_card","_card$type","_card$mana_cost","_card$element","_card$description","card","display_card","manaCost","mana_cost","isAffordable","type","String","toUpperCase","manaCostLabel","emoji","rangeLabel","Array","isArray","range","length","min","max","trim","accuracyLabel","accuracy","Math","round","elementLabel","element","elementClass","toLowerCase","description","cardClassName","filter","Boolean","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","formatActiveEffects","wizardState","_wizardState$active_e","effects","active_effects","text","title","effect","_ref","_effect$remaining_tur","_ref2","_effect$effect_type","_ref3","_ref4","_effect$source_name","_effect$value","_effect$name2","rounds","remaining_turns","rounds_remaining","effect_type","sourceName","source_name","source","is_defense","_effect$name","effectValue","value","percent","toFixed","is_buff","is_debuff","StatCircles","current","color","clampedCurrent","clampedMax","style","width","backgroundColor","_c","HorizontalStatBars","state","stats","key","label","_state$player$wizard$","rawValue","player","_c2","BattleColumn","current_health","max_health","current_mana","_wizardState$active_e2","_wizardState$active_e3","_c3","Battle","playerOneWizard","playerTwoWizard","onReset","apiBaseUrl","_s","_playerStates$","_playerStates$2","gameStateRef","controllerRef","cancelledRef","baseUrlRef","actingIndexRef","turnRef","autoProgressRef","isFetchingActionRef","pendingActionRef","winnerRef","isExecutingActionRef","generatingWizardName","setGeneratingWizardName","playerStates","setPlayerStates","battleLog","setBattleLog","winner","setWinner","autoProgress","setAutoProgress","pendingAction","setPendingAction","isFetchingAction","setIsFetchingAction","isExecutingAction","setIsExecutingAction","shouldAutoResolve","setShouldAutoResolve","appendToLog","entry","prev","fetchActionForCurrentActor","fetchAction","autoExecute","_currentState$player_","_currentState$player_2","_actingState$player$w","_actingState$player","_actingState$player$w2","_actingState$player$w3","_actingState$current_","currentState","actingIndex","actingState","player_states","enemyState","ERROR","message","validActions","affordable_actions","_currentState$increme","_currentState$get_win","manaBefore","increment_mana","updatedStates","manaGains","idx","TURN_END","winnerAfterSkip","get_winner","WINNER","controller","AbortController","_ref5","_selectedAction$name","_selectedAction$const","battleContext","compact_battle_context","console","log","response","fetch","method","headers","body","JSON","stringify","system_prompt","user_prompt","battleSnapshot","signal","ok","errorText","Error","status","data","json","rawAction","action_index","parsedIndex","parseInt","adjustedIndex","selectedAction","turnData","turn","actingWizardName","actionName","constructor","error","executeAction","actionData","continueBattle","_currentState$perform","_currentState$get_win2","TURN_START","announcement","perform_action","action_emoji","action_type","spell_type","DAMAGE","BUFF","DEBUFF","PLAYER_ACTION","winnerAfterAction","_currentState$increme2","undefined","abort","initialize","handleNextMove","toggleAutoProgress","nextValue","playerOneState","playerTwoState","nextMoveDisabled","autoProgressDisabled","autoProgressButtonClass","nextMoveLabel","onClick","disabled","entryClass","_c4","$RefreshReg$"],"sources":["/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport { combatSystemPrompt, combatSystemPromptV2, combatUserPromptV2 } from \"./prompts/prompts\";\nimport BattleLogMessageType from \"./enums/battleLogMessageType\";\nimport ActionType from \"./enums/actionType\";\nimport SpellType from \"./enums/spellType\";\n\nconst formatActions = (wizard, currentMana) => {\n  if (!wizard) {\n    return [];\n  }\n\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = wizard.all_actions?.() ?? [];\n\n  return actions.map((action, index) => {\n    const card = action.display_card?.();\n    if (!card) {\n      return null;\n    }\n\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n\n    const type = String(card.type ?? \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${card.mana_cost ?? \"?\"}`;\n    const emoji =\n      type === \"DAMAGE\"\n        ? \"💥\"\n        : type === \"BUFF\"\n        ? \"📈\"\n        : type === \"DEBUFF\"\n        ? \"📉\"\n        : type === \"HEAL\"\n        ? \"🍃\"\n        : type === \"DEFENSE\"\n        ? \"🛡️\"\n        : \"\";\n\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = card.element ?? null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = card.description ?? \"\";\n\n    const cardClassName = [\n      \"spell-card\",\n      type === \"HEAL\"\n        ? \"spell-card-heal\"\n        : type === \"DEFENSE\"\n        ? \"spell-card-defense\"\n        : \"spell-card-spell\",\n      !isAffordable ? \"spell-card--unavailable\" : null,\n    ]\n      .filter(Boolean)\n      .join(\" \");\n\n    return (\n      <div key={`${card.name}-${index}`} className={cardClassName}>\n        <div className=\"spell-card__row\">\n          <div className=\"spell-card__primary-left\">\n            {elementClass && <span className={elementClass}>{elementLabel}</span>}\n            <span className=\"spell-card__name\">{card.name}</span>\n          </div>\n          <div className=\"spell-card__primary-right\">\n            <span className=\"spell-card__meta spell-card__meta--range\">{rangeLabel}</span>\n            <span className=\"spell-card__meta\">{accuracyLabel}</span>\n            <span className=\"spell-card__meta\">{manaCostLabel}</span>\n          </div>\n        </div>\n        {description && (\n          <div className=\"spell-card__row spell-card__row--description\">\n            <span className=\"spell-card__description\">{description}</span>\n          </div>\n        )}\n      </div>\n    );\n  });\n};\n\nconst formatActiveEffects = (wizardState) => {\n  const effects = wizardState.active_effects ?? [];\n  if (!effects.length) {\n    return [{ text: \"(none)\", title: \"\" }];\n  }\n\n  return effects.map((effect) => {\n    const rounds = effect.remaining_turns ?? effect.rounds_remaining ?? 0;\n    const type = String(effect.effect_type ?? effect.type ?? \"\").toUpperCase();\n    const sourceName = effect.source_name ?? effect.source ?? effect.name ?? \"Effect\";\n    if (type === \"DEFENSE\" || (effect.is_defense && typeof effect.is_defense === \"boolean\")) {\n      return {\n        text: `🛡️ ${effect.name ?? \"Unknown\"} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    const effectValue = Number(effect.value ?? 0) || 0;\n    const percent = `${(Math.round(effectValue * 1000) / 10).toFixed(1)}%`;\n\n    if (type === \"BUFF\" || effect.is_buff) {\n      return {\n        text: `📈 ${percent} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    if (type === \"DEBUFF\" || effect.is_debuff) {\n      return {\n        text: `📉 ${percent} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    return {\n      text: `${effect.name ?? \"Effect\"} (${rounds})`,\n      title: sourceName,\n    };\n  });\n};\n\nconst StatCircles = ({ current, max, color }) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n\n  return (\n    <div className=\"stat-horizontal\">\n      <div className=\"stat-horizontal__meter\">\n        <div\n          className=\"stat-horizontal__fill\"\n          style={{ width: `${percent * 100}%`, backgroundColor: color }}\n        >\n          <span className=\"stat-horizontal__value\">{`${clampedCurrent}/${clampedMax}`}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HorizontalStatBars = ({ state }) => {\n  const stats = [\n    { key: \"attack\", label: \"Attack\", color: \"#f87171\" },\n    { key: \"defense\", label: \"Defense\", color: \"#60a5fa\" },\n    { key: \"healing\", label: \"Healing\", color: \"#34d399\" },\n    { key: \"arcane\", label: \"Arcane\", color: \"#c084fc\" },\n  ];\n\n  return (\n    <div className=\"stat-bars\">\n      {stats.map(({ key, label, color }) => {\n        const rawValue = Math.min(1, Math.max(0, state.player.wizard[key] ?? 0));\n        const percent = Math.round(rawValue * 100);\n\n        return (\n          <div key={key} className=\"stat-row\">\n            <span className=\"stat-label\">{label}</span>\n            <div className=\"stat-meter\">\n              <div\n                className=\"stat-meter__fill\"\n                style={{ width: `${percent}%`, backgroundColor: color }}\n              >\n                <span className=\"stat-meter__value\">{percent}%</span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst BattleColumn = ({ actions, wizardState }) => (\n  <section className=\"battle-column\">\n    <header className=\"battle-column__header\">\n      <h2>{wizardState.player.wizard.name}</h2>\n    </header>\n    <div className=\"battle-column__content\">\n      <div className=\"battle-stats\">\n        <div className=\"battle-stats__resource-bars\">\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Health</span>\n            <StatCircles current={wizardState.current_health} max={wizardState.max_health} color=\"#b91c1c\" />\n          </div>\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Mana</span>\n            <StatCircles current={wizardState.current_mana} max={25} color=\"#a855f7\" />\n          </div>\n        </div>\n        <div className=\"battle-stats__effects\">\n          <h4 className=\"battle-section-title\">Active Effects</h4>\n          <p className=\"battle-effects__list\">\n            {formatActiveEffects(wizardState)\n              .map(({ text, title }, index) => (\n                <span key={`${text}-${index}`} title={title}>\n                  {text}\n                  {index < (wizardState.active_effects?.length ?? 0) - 1 ? \", \" : \"\"}\n                </span>\n              ))}\n          </p>\n        </div>\n        <div className=\"battle-stats__bars\">\n          <h4 className=\"battle-section-title\">Stats</h4>\n          <HorizontalStatBars state={wizardState} />\n        </div>\n      </div>\n      <div className=\"battle-actions\">\n        <h4 className=\"battle-section-title battle-section-title--spells\">Spells</h4>\n        <div className=\"spell-cards\">{actions}</div>\n      </div>\n    </div>\n  </section>\n);\n\nconst Battle = ({ playerOneWizard, playerTwoWizard, onReset, apiBaseUrl }) => {\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl ?? \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl ?? \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n\n  const appendToLog = useCallback((entry) => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog((prev) => [entry, ...prev]);\n  }, []);\n\n  const fetchActionForCurrentActor = useCallback(\n    async function fetchAction(autoExecute = false) {\n      if (\n        cancelledRef.current ||\n        winnerRef.current ||\n        isFetchingActionRef.current ||\n        pendingActionRef.current\n      ) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      const actingIndex = actingIndexRef.current;\n      const actingState = currentState.player_states?.[actingIndex];\n      const enemyState = currentState.player_states?.[1 - actingIndex];\n\n      if (!actingState || !enemyState) {\n        appendToLog({ type: BattleLogMessageType.ERROR, message: \"Invalid game state\" });\n        return;\n      }\n\n      const validActions =\n        actingState.player?.wizard?.affordable_actions?.(actingState.current_mana ?? 0) ?? [];\n\n      if (!validActions.length) {\n        appendToLog({ type: BattleLogMessageType.ERROR, message: \"No valid actions available. Skipping turn.\" });\n\n        const manaBefore = actingIndex === 1\n          ? currentState.player_states.map((state) => state.current_mana)\n          : null;\n        currentState.increment_mana?.();\n        const updatedStates = [...currentState.player_states];\n        setPlayerStates(updatedStates);\n\n        if (actingIndex === 1 && manaBefore) {\n          const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n          appendToLog({\n            type: BattleLogMessageType.TURN_END,\n            message: `End turn ${turnRef.current}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`,\n          });\n        }\n\n        actingIndexRef.current = 1 - actingIndex;\n        if (actingIndex === 1) {\n          turnRef.current += 1;\n        }\n\n        const winnerAfterSkip = currentState.get_winner?.();\n        if (winnerAfterSkip) {\n          winnerRef.current = winnerAfterSkip;\n          setWinner(winnerAfterSkip);\n          appendToLog({ type: BattleLogMessageType.WINNER, message: `${winnerAfterSkip.name} wins!` });\n          return;\n        }\n\n        return fetchAction(autoExecute);\n      }\n\n      setIsFetchingAction(true);\n      isFetchingActionRef.current = true;\n      setPendingAction(null);\n      pendingActionRef.current = null;\n      setGeneratingWizardName(actingState.player.wizard.name);\n\n      const controller = new AbortController();\n      controllerRef.current = controller;\n\n      try {\n        const battleContext = currentState.compact_battle_context(actingIndex);\n        console.log(combatUserPromptV2(actingState.player.wizard, battleContext['actor_info'], battleContext['enemy_info']))\n        const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            system_prompt: combatSystemPromptV2(actingState.player.wizard),\n            user_prompt: currentState.battleSnapshot(actingIndex),\n          }),\n          signal: controller.signal,\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n        }\n\n        const data = await response.json();\n        const rawAction = data?.action_index;\n        const parsedIndex =\n          typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n\n        if (!Number.isFinite(parsedIndex)) {\n          appendToLog({ type: BattleLogMessageType.ERROR, message:`Invalid action index returned: ${JSON.stringify(data)}`});\n          return;\n        }\n\n        const adjustedIndex = parsedIndex;\n        if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n          appendToLog({ type: BattleLogMessageType.ERROR, message: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions` });\n          return;\n        }\n\n        const selectedAction = validActions[adjustedIndex];\n        const turnData = {\n          actingIndex,\n          turn: turnRef.current,\n          actingWizardName: actingState.player.wizard.name,\n          selectedAction,\n          actionName:\n            selectedAction?.name ?? selectedAction?.constructor?.name ?? \"Action\",\n        };\n\n        pendingActionRef.current = turnData;\n        setPendingAction(turnData);\n        setShouldAutoResolve(autoExecute || autoProgressRef.current);\n      } catch (error) {\n        if (error?.name === \"AbortError\" || cancelledRef.current) {\n          return;\n        }\n\n        appendToLog({ type: BattleLogMessageType.ERROR, message: `Error during action generation: ${String(error)}` });\n      } finally {\n        if (controllerRef.current === controller) {\n          controllerRef.current = null;\n        }\n\n        isFetchingActionRef.current = false;\n        setIsFetchingAction(false);\n        setGeneratingWizardName(null);\n      }\n    },\n    [appendToLog, setPlayerStates, setWinner]\n  );\n\n  const executeAction = useCallback(\n    (actionData) => {\n      if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      setShouldAutoResolve(false);\n      setPendingAction(null);\n      pendingActionRef.current = null;\n\n      setIsExecutingAction(true);\n      isExecutingActionRef.current = true;\n\n      let continueBattle = true;\n\n      try {\n        if (actionData.actingIndex === 0) {\n          appendToLog({ type: BattleLogMessageType.TURN_START, message: `Turn ${actionData.turn}` });\n        }\n\n        const announcement =\n          currentState.perform_action(actionData.actingIndex, actionData.selectedAction) ?? \"\";\n\n        setPlayerStates([...currentState.player_states]);\n\n        var action_emoji = \"🪄\";\n        console.log(actionData.selectedAction.action_type);\n        switch (actionData.selectedAction.action_type.name) {\n          case \"HEAL\":\n            action_emoji = \"🍃\";\n            break;\n          case \"DEFEND\":\n            action_emoji = \"🛡️\";\n            break;\n          case \"CAST_SPELL\":\n            switch(actionData.selectedAction.spell_type) {\n                case SpellType.DAMAGE:\n                    action_emoji = \"💥\";\n                    break;\n                case SpellType.BUFF:\n                    action_emoji = \"📈\";\n                    break;\n                case SpellType.DEBUFF:\n                    action_emoji = \"📉\";\n                    break;\n            }\n            break;\n        }\n        appendToLog({ type: BattleLogMessageType.PLAYER_ACTION, message: `${action_emoji} ${announcement}\\n` });\n        // console.log(\"[Battle] Actor context:\", currentState.compact_battle_context(actionData.actingIndex));\n\n        const winnerAfterAction = currentState.get_winner?.();\n        if (winnerAfterAction) {\n          winnerRef.current = winnerAfterAction;\n          continueBattle = false;\n          setWinner(winnerAfterAction);\n          appendToLog({ type: BattleLogMessageType.WINNER, message: `${winnerAfterAction.name} wins!` });\n        } else {\n          actingIndexRef.current = 1 - actionData.actingIndex;\n          if (actingIndexRef.current === 0) {\n            const manaBefore = currentState.player_states.map((state) => state.current_mana);\n            currentState.increment_mana?.();\n            const updatedStates = [...currentState.player_states];\n            setPlayerStates(updatedStates);\n            const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n            appendToLog({\n              type: BattleLogMessageType.TURN_END,\n              message: `End turn ${actionData.turn}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`,\n            });\n            // console.log(\"[Battle] Post-turn context:\", currentState.compact_battle_context(actionData.actingIndex));\n            turnRef.current = actionData.turn + 1;\n          }\n        }\n      } catch (error) {\n        continueBattle = false;\n        appendToLog({ type: BattleLogMessageType.ERROR, message: `Action failed: ${String(error)}` });\n      } finally {\n        setIsExecutingAction(false);\n        isExecutingActionRef.current = false;\n\n        if (continueBattle && !cancelledRef.current) {\n          fetchActionForCurrentActor(autoProgressRef.current);\n        }\n      }\n    },\n    [appendToLog, fetchActionForCurrentActor]\n  );\n\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n\n    fetchActionForCurrentActor(true);\n\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n\n  const handleNextMove = useCallback(() => {\n    if (\n      !pendingAction ||\n      autoProgress ||\n      winner ||\n      isFetchingAction ||\n      isExecutingAction ||\n      cancelledRef.current\n    ) {\n      return;\n    }\n\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress((prev) => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (\n          actionData &&\n          !winnerRef.current &&\n          !isFetchingActionRef.current &&\n          !isExecutingActionRef.current\n        ) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n\n  const playerOneState = playerStates[0] ?? null;\n  const playerTwoState = playerStates[1] ?? null;\n\n  const nextMoveDisabled =\n    !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${\n    autoProgress ? \"\" : \"button-outline\"\n  }`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n\n  return (\n    <section className=\"battle-layout\">\n      {playerOneState && (\n        <BattleColumn\n          wizardState={playerOneState}\n          actions={formatActions(playerOneState.player.wizard, playerOneState.current_mana)}\n        />\n      )}\n\n      <section className=\"battle-log\">\n        <button className=\"prompt-button button-outline battle-reset\" type=\"button\" onClick={onReset}>\n          Start Over\n        </button>\n        <div className=\"battle-controls\">\n          <button\n            className=\"prompt-button battle-controls__primary\"\n            type=\"button\"\n            onClick={handleNextMove}\n            disabled={nextMoveDisabled}\n          >\n            {nextMoveLabel}\n          </button>\n          <button\n            className={autoProgressButtonClass}\n            type=\"button\"\n            onClick={toggleAutoProgress}\n            disabled={autoProgressDisabled}\n          >\n            {`Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`}\n          </button>\n        </div>\n        <div className=\"battle-log__content\">\n          <h2>Battle Log</h2>\n          {autoProgress && isFetchingAction && generatingWizardName && (\n            <p className=\"battle-log__status\">{`Generating ${generatingWizardName}'s move...`}</p>\n          )}\n          {battleLog.length === 0 ? (\n            <p className=\"battle-log__empty\">\n              {isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"}\n            </p>\n          ) : (\n            battleLog.map((entry, index) => {\n\n                var entryClass = \"battle-log__entry\";\n                switch (entry.type) {\n                    case BattleLogMessageType.PLAYER_ACTION:\n                        entryClass = \"battle-log__entry\";\n                        break;\n                    case BattleLogMessageType.WINNER:\n                        entryClass = \"battle-log__entry--WINNER\";\n                        break;\n                    case BattleLogMessageType.TURN_START:\n                        entryClass = \"battle-log__entry--turn-start\";\n                        break;\n                    case BattleLogMessageType.TURN_END:\n                        entryClass = \"battle-log__entry--turn-end\";\n                        break;\n                    case BattleLogMessageType.ERROR:\n                        entryClass = \"battle-log__entry--error\";\n                        break;\n                }\n\n              return (\n                <div key={index}>\n                  <h1 className={entryClass}>{entry.message}</h1>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </section>\n\n      {playerTwoState && (\n        <BattleColumn\n          wizardState={playerTwoState}\n          actions={formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Battle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}