{"ast":null,"code":"import PlayerState from \"../classes/playerState\";\nexport const combatSystemPrompt = wizardState => {\n  var _wizardState$player;\n  if (!(wizardState instanceof PlayerState)) {\n    throw new Error(\"combatSystemPrompt expects a PlayerState instance\");\n  }\n  const outputFormat = \"{'action': <int>}\";\n  const wizard = (_wizardState$player = wizardState.player) === null || _wizardState$player === void 0 ? void 0 : _wizardState$player.wizard;\n  if (!wizard) {\n    throw new Error(\"PlayerState is missing an associated wizard\");\n  }\n  return `You are ${wizard.name}, a wizard in a turn-based Pvp combat game (think Pokémon/Wizard101). Output JSON only.\n\nYOUR ROLE\n- Choose exactly ONE action index each round and return: ${outputFormat}.\n- Do not explain or add text.\n\nCOMBAT STYLE\n- Combat style: \"${wizard.combat_style}\"\n\nGAME RECAP (short)\n- Both sides pick an action before the round resolves.\n- Actions: CAST_SPELL, DEFEND, HEAL.\n- Spell types: DAMAGE, BUFF, DEBUFF.\n- Mana gates actions; you gain mana at round start.\n- Elements have 2 strengths, 2 weaknesses; others neutral.\n- Every action has accuracy; on failure you do nothing.\n- Win by dropping enemy HP to 0.\n\nINPUT YOU WILL RECEIVE (single user message)\n- Your state (HP, Mana, Active Effects), Enemy state (HP, Mana, Active Effects).\n- Enemy available actions this round.\n- Your available, numbered actions this round (with type, element, accuracy, cost, and effect ranges).\n- You must pick one of YOUR numbered actions.\n\nSTYLE BIAS (must follow)\n- Act in character with \"${wizard.combat_style}\".\n- Patient/control? Prefer setup (BUFF/DEBUFF/DEFEND) before committing to DAMAGE.\n- If you are low on health you MUST HEAL\n\nCHOICE RULES (concise)\n1) Legality: Pick only an action you can afford (mana) and that exists in the list.\n2) Elements: Favor actions strong vs enemy and avoid actions weak vs enemy/active shields.\n3) Accuracy vs Payoff: Balance hit chance against effect size; style may override risk.\n4) Turn order:\n   - FIRST: proactive—secure tempo (opening BUFF/DEBUFF/strong DAMAGE fits style).\n   - SECOND: expect impact before you resolve—DEFEND or safer options gain value if big hit is likely.\n5) State checks:\n   - Low HP: HEAL; ultra-aggressive still leans DAMAGE unless near certain KO.\n   - Redundant effects: avoid stacking the same BUFF/DEBUFF if duration remains.\n6) Mana tempo: If a higher-impact play is enabled next round, consider a setup action now (per style).\n7) Tie-breakers: prefer higher expected impact (effect * accuracy); if close, lower mana cost; if still tied, pick the earliest index.\n\nNO-REDUNDANT EFFECTS\n- Effects do NOT stack unless explicitly marked stackable=true.\n- Do NOT pick DEFEND if a shield/guard from you is still active this round.\n- Do NOT recast a BUFF/DEBUFF you already applied if its remaining_turns > 0.\n- Exception: You MAY refresh only if (stackable=true) or remaining_turns <= 1 and your style favors it.`;\n};\nexport default combatSystemPrompt;\nexport const combatSystemPromptV2 = (actingWizard, _actorInfo, _enemyInfo) => {\n  return `You are ${actingWizard.name}, a wizard in a turn-based Pvp combat game (think Pokémon/Wizard101). \nYou engage in combat with the following style: \"${actingWizard.combat_style}\". \n\nYOUR ROLE\n- Pick the INDEX of the BEST action from the provided actions array and output ONLY {\"action_index\": <int>}\n- Use 1-based indexing\n- Output JSON only. Do not explain or add text.\n\nGAME CONTEXT\n- Actions: CAST_SPELL, DEFEND, HEAL.\n- Spell types: DAMAGE, BUFF, DEBUFF.\n- Mana gates actions; you gain mana after each turn.\n- Elements have 2 strengths, 2 weaknesses; others neutral.\n- Every action has accuracy; on failure you do nothing.\n- Win by dropping enemy HP to 0.\n\nINPUT\n- Your Current State:\n  - health_danger_level (low,medium,high)\n  - offensive_level (low,medium,high)\n  - defensive_level (low,medium,high)\n- Enemy Current State:\n  - health_danger_level\n  - offensive_level\n  - defensive_level\n- Actions You Can Take:\n  - type (DAMAGE, BUFF, DEBUFF, DEFEND, HEAL)\n  - effect (short summary)\n  - accuracy (0..1)\n  - element_effectiveness (low,medium,high)\n  - is_redundant (true|false)\n  - can_kill (true|false)\n\nINPUTS EXPLAINED\n- health_danger_level: How close a player is to losing (high means they can lose next turn)\n- offensive_level: How strong a player's attacks will be (high means stronger)\n- defensive_level: How well a player can reduce damage from the opponent's next attack (high means taking less damage)\n- effect: Describes what the action can accomplish (ex. \"Restore 100-200 health\")\n- accuracy: The chance of the action working (1 means guaranteed to work)\n- element_effectiveness: How strong that action's element is against the opposing player's elements\n- is_redundant: Whether that action's effect is already active and casting it again would be redundant\n- can_kill: Whether that action has any chance to KO the opponent\n\n### Ground rules (assume listed actions are affordable/legal)\n- Effects **do not stack**. If \\`is_redundant\\` is true, avoid repeating\n- Lower accuracy = higher risk\n- If \\`can_kill\\` is true, strongly favor that action unless your own death is imminent (refer to combat style)\n- Respect danger levels:\n  - YOUR \\`health_danger_level\\` high ⇒ **HEAL** first if available; else **DEFEND**\n  - ENEMY \\`health_danger_level\\` high ⇒ favor **DAMAGE** that is accurate/effective; a safe KO beats setup.\n- Consider offense / defense levels\n  - \n- Mid-fight momentum:\n  - If your \\`offensive_level\\` low and a non-redundant **BUFF** exists, consider BUFF to swing damage.\n  - If enemy \\`offensive_level\\` high or your \\`defensive_level\\` low, consider non-redundant **DEFEND** or **DEBUFF** that reduces their output.\n  - Otherwise, prefer **DAMAGE** with good accuracy × effectiveness.\n\n### 60/40 policy (state vs. style)\n- Weight ~60% on present state (rules above), ~40% on \\`combat_style\\`.\n- Style hints:\n  - “Aggressive/burst/pressure/speed” ⇒ bias toward **DAMAGE** and non-redundant **BUFF** that increases offense.\n  - “Patient/control/precision/tempo” ⇒ bias toward **DEBUFF/DEFEND**, then accurate **DAMAGE**.\n  - “Sustain/restore/growth” ⇒ slightly higher willingness to **HEAL** and **DEFEND** before trading.\n  - “Trickery/illusion” ⇒ favor **DEBUFF** to tilt exchanges, then strike when enemy is weak.\n\n### Simple ranking rubric (compact, deterministic)\n1) **Filter out** clearly inferior options:\n   - Remove actions with \\`is_redundant\\` = true unless (a) lethal or (b) needed for survival this turn.\n2) **Immediate win/lose checks**:\n   - If any \\`can_kill\\` with accuracy ≥0.5 and you are not about to die this turn, pick the one with best (accuracy × element_effectiveness). \n   - If your \\`health_danger_level\\` is high, pick **HEAL**; if none, pick **DEFEND**/**DEBUFF** that best reduces incoming damage next turn (prefer higher accuracy).\n3) **Momentum choice**:\n   - If your \\`offensive_level\\` low and non-redundant **BUFF** exists, consider it (especially when enemy offense is low/medium).\n   - If enemy offense high or your defense low, prefer **DEFEND** or a defensive **DEBUFF** with higher accuracy.\n4) **Default**:\n   - Pick the **DAMAGE** action with the highest (accuracy × element_effectiveness); break ties by style preference.\n5) **Final tiebreakers** (in order): higher accuracy → higher element_effectiveness → aligns better with \\`combat_style\\` → lower index.\n  `;\n};\nexport const combatUserPromptV2 = (actingWizard, actorInfo, enemyInfo) => {\n  return `Your Current State:\n- health_danger_level: ${actorInfo['health_danger_level']}\n- mana_level: ${actorInfo['mana_level']}\n- offensive_level: ${actorInfo['offensive_level']}\n- defensive_level: ${actorInfo['defensive_level']}\n\nYour Enemy's Current State:\n- health_danger_level: ${enemyInfo['health_danger_level']}\n- mana_level: ${enemyInfo['mana_level']}\n- offensive_level: ${enemyInfo['offensive_level']}\n- defensive_level: ${enemyInfo['defensive_level']}\n\nChoose ONE of the following actions to take:\n${actorInfo['available_actions'].map((action, idx) => `- ${idx + 1}: ${action}`).join('\\n')}\n\nMake sure you act in accordance with your combat style: \"${actingWizard.combat_style}\"`;\n};\n\n// So an action has the following info:\n// 1- index\n// 2- type\n// 3- element_effectiveness\n// 4- effect_range (using calculated_damage)\n// 5- accuracy\n// 6- mana_cost\n// 7- is_redundant\n// 8- can_kill\n\n// Other Info:\n// You\n//   - hp + hp_max + hp_pct\n//   - mana + mana_regen\n//   - active_effects {SHIELD/BUFF/DEBUFF, element/effect, turns_remaining}\n//   - danger_level\n//   - actions you can take this turn\n// Enemy\n//   - hp + hp_max + hp_pct\n//   - active_effects {SHIELD/BUFF/DEBUFF, element/effect, turns_remaining}\n\n// Things I'd want to know in battle:\n// Is it better to attack, buff, heal, or defend?\n// - health_level (how close a player is to dying)\n// - mana_level (how close a player is to running out of mana)\n// - offensive_level (how many net buffs are on a player)\n// - defensive_level (how many net defenses are on a player)","map":{"version":3,"names":["PlayerState","combatSystemPrompt","wizardState","_wizardState$player","Error","outputFormat","wizard","player","name","combat_style","combatSystemPromptV2","actingWizard","_actorInfo","_enemyInfo","combatUserPromptV2","actorInfo","enemyInfo","map","action","idx","join"],"sources":["/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/prompts/prompts.js"],"sourcesContent":["import PlayerState from \"../classes/playerState\";\n\nexport const combatSystemPrompt = (wizardState) => {\n  if (!(wizardState instanceof PlayerState)) {\n    throw new Error(\"combatSystemPrompt expects a PlayerState instance\");\n  }\n\n  const outputFormat = \"{'action': <int>}\";\n  const wizard = wizardState.player?.wizard;\n\n  if (!wizard) {\n    throw new Error(\"PlayerState is missing an associated wizard\");\n  }\n\n  return `You are ${wizard.name}, a wizard in a turn-based Pvp combat game (think Pokémon/Wizard101). Output JSON only.\n\nYOUR ROLE\n- Choose exactly ONE action index each round and return: ${outputFormat}.\n- Do not explain or add text.\n\nCOMBAT STYLE\n- Combat style: \"${wizard.combat_style}\"\n\nGAME RECAP (short)\n- Both sides pick an action before the round resolves.\n- Actions: CAST_SPELL, DEFEND, HEAL.\n- Spell types: DAMAGE, BUFF, DEBUFF.\n- Mana gates actions; you gain mana at round start.\n- Elements have 2 strengths, 2 weaknesses; others neutral.\n- Every action has accuracy; on failure you do nothing.\n- Win by dropping enemy HP to 0.\n\nINPUT YOU WILL RECEIVE (single user message)\n- Your state (HP, Mana, Active Effects), Enemy state (HP, Mana, Active Effects).\n- Enemy available actions this round.\n- Your available, numbered actions this round (with type, element, accuracy, cost, and effect ranges).\n- You must pick one of YOUR numbered actions.\n\nSTYLE BIAS (must follow)\n- Act in character with \"${wizard.combat_style}\".\n- Patient/control? Prefer setup (BUFF/DEBUFF/DEFEND) before committing to DAMAGE.\n- If you are low on health you MUST HEAL\n\nCHOICE RULES (concise)\n1) Legality: Pick only an action you can afford (mana) and that exists in the list.\n2) Elements: Favor actions strong vs enemy and avoid actions weak vs enemy/active shields.\n3) Accuracy vs Payoff: Balance hit chance against effect size; style may override risk.\n4) Turn order:\n   - FIRST: proactive—secure tempo (opening BUFF/DEBUFF/strong DAMAGE fits style).\n   - SECOND: expect impact before you resolve—DEFEND or safer options gain value if big hit is likely.\n5) State checks:\n   - Low HP: HEAL; ultra-aggressive still leans DAMAGE unless near certain KO.\n   - Redundant effects: avoid stacking the same BUFF/DEBUFF if duration remains.\n6) Mana tempo: If a higher-impact play is enabled next round, consider a setup action now (per style).\n7) Tie-breakers: prefer higher expected impact (effect * accuracy); if close, lower mana cost; if still tied, pick the earliest index.\n\nNO-REDUNDANT EFFECTS\n- Effects do NOT stack unless explicitly marked stackable=true.\n- Do NOT pick DEFEND if a shield/guard from you is still active this round.\n- Do NOT recast a BUFF/DEBUFF you already applied if its remaining_turns > 0.\n- Exception: You MAY refresh only if (stackable=true) or remaining_turns <= 1 and your style favors it.`;\n};\n\nexport default combatSystemPrompt;\n\nexport const combatSystemPromptV2 = (actingWizard, _actorInfo, _enemyInfo) => {\n  return `You are ${actingWizard.name}, a wizard in a turn-based Pvp combat game (think Pokémon/Wizard101). \nYou engage in combat with the following style: \"${actingWizard.combat_style}\". \n\nYOUR ROLE\n- Pick the INDEX of the BEST action from the provided actions array and output ONLY {\"action_index\": <int>}\n- Use 1-based indexing\n- Output JSON only. Do not explain or add text.\n\nGAME CONTEXT\n- Actions: CAST_SPELL, DEFEND, HEAL.\n- Spell types: DAMAGE, BUFF, DEBUFF.\n- Mana gates actions; you gain mana after each turn.\n- Elements have 2 strengths, 2 weaknesses; others neutral.\n- Every action has accuracy; on failure you do nothing.\n- Win by dropping enemy HP to 0.\n\nINPUT\n- Your Current State:\n  - health_danger_level (low,medium,high)\n  - offensive_level (low,medium,high)\n  - defensive_level (low,medium,high)\n- Enemy Current State:\n  - health_danger_level\n  - offensive_level\n  - defensive_level\n- Actions You Can Take:\n  - type (DAMAGE, BUFF, DEBUFF, DEFEND, HEAL)\n  - effect (short summary)\n  - accuracy (0..1)\n  - element_effectiveness (low,medium,high)\n  - is_redundant (true|false)\n  - can_kill (true|false)\n\nINPUTS EXPLAINED\n- health_danger_level: How close a player is to losing (high means they can lose next turn)\n- offensive_level: How strong a player's attacks will be (high means stronger)\n- defensive_level: How well a player can reduce damage from the opponent's next attack (high means taking less damage)\n- effect: Describes what the action can accomplish (ex. \"Restore 100-200 health\")\n- accuracy: The chance of the action working (1 means guaranteed to work)\n- element_effectiveness: How strong that action's element is against the opposing player's elements\n- is_redundant: Whether that action's effect is already active and casting it again would be redundant\n- can_kill: Whether that action has any chance to KO the opponent\n\n### Ground rules (assume listed actions are affordable/legal)\n- Effects **do not stack**. If \\`is_redundant\\` is true, avoid repeating\n- Lower accuracy = higher risk\n- If \\`can_kill\\` is true, strongly favor that action unless your own death is imminent (refer to combat style)\n- Respect danger levels:\n  - YOUR \\`health_danger_level\\` high ⇒ **HEAL** first if available; else **DEFEND**\n  - ENEMY \\`health_danger_level\\` high ⇒ favor **DAMAGE** that is accurate/effective; a safe KO beats setup.\n- Consider offense / defense levels\n  - \n- Mid-fight momentum:\n  - If your \\`offensive_level\\` low and a non-redundant **BUFF** exists, consider BUFF to swing damage.\n  - If enemy \\`offensive_level\\` high or your \\`defensive_level\\` low, consider non-redundant **DEFEND** or **DEBUFF** that reduces their output.\n  - Otherwise, prefer **DAMAGE** with good accuracy × effectiveness.\n\n### 60/40 policy (state vs. style)\n- Weight ~60% on present state (rules above), ~40% on \\`combat_style\\`.\n- Style hints:\n  - “Aggressive/burst/pressure/speed” ⇒ bias toward **DAMAGE** and non-redundant **BUFF** that increases offense.\n  - “Patient/control/precision/tempo” ⇒ bias toward **DEBUFF/DEFEND**, then accurate **DAMAGE**.\n  - “Sustain/restore/growth” ⇒ slightly higher willingness to **HEAL** and **DEFEND** before trading.\n  - “Trickery/illusion” ⇒ favor **DEBUFF** to tilt exchanges, then strike when enemy is weak.\n\n### Simple ranking rubric (compact, deterministic)\n1) **Filter out** clearly inferior options:\n   - Remove actions with \\`is_redundant\\` = true unless (a) lethal or (b) needed for survival this turn.\n2) **Immediate win/lose checks**:\n   - If any \\`can_kill\\` with accuracy ≥0.5 and you are not about to die this turn, pick the one with best (accuracy × element_effectiveness). \n   - If your \\`health_danger_level\\` is high, pick **HEAL**; if none, pick **DEFEND**/**DEBUFF** that best reduces incoming damage next turn (prefer higher accuracy).\n3) **Momentum choice**:\n   - If your \\`offensive_level\\` low and non-redundant **BUFF** exists, consider it (especially when enemy offense is low/medium).\n   - If enemy offense high or your defense low, prefer **DEFEND** or a defensive **DEBUFF** with higher accuracy.\n4) **Default**:\n   - Pick the **DAMAGE** action with the highest (accuracy × element_effectiveness); break ties by style preference.\n5) **Final tiebreakers** (in order): higher accuracy → higher element_effectiveness → aligns better with \\`combat_style\\` → lower index.\n  `;\n};\n\nexport const combatUserPromptV2 = (actingWizard, actorInfo, enemyInfo) => {\n    return `Your Current State:\n- health_danger_level: ${actorInfo['health_danger_level']}\n- mana_level: ${actorInfo['mana_level']}\n- offensive_level: ${actorInfo['offensive_level']}\n- defensive_level: ${actorInfo['defensive_level']}\n\nYour Enemy's Current State:\n- health_danger_level: ${enemyInfo['health_danger_level']}\n- mana_level: ${enemyInfo['mana_level']}\n- offensive_level: ${enemyInfo['offensive_level']}\n- defensive_level: ${enemyInfo['defensive_level']}\n\nChoose ONE of the following actions to take:\n${actorInfo['available_actions'].map((action, idx) => `- ${idx+1}: ${action}`).join('\\n')}\n\nMake sure you act in accordance with your combat style: \"${actingWizard.combat_style}\"`;\n};\n\n// So an action has the following info:\n// 1- index\n// 2- type\n// 3- element_effectiveness\n// 4- effect_range (using calculated_damage)\n// 5- accuracy\n// 6- mana_cost\n// 7- is_redundant\n// 8- can_kill\n\n// Other Info:\n// You\n//   - hp + hp_max + hp_pct\n//   - mana + mana_regen\n//   - active_effects {SHIELD/BUFF/DEBUFF, element/effect, turns_remaining}\n//   - danger_level\n//   - actions you can take this turn\n// Enemy\n//   - hp + hp_max + hp_pct\n//   - active_effects {SHIELD/BUFF/DEBUFF, element/effect, turns_remaining}\n\n// Things I'd want to know in battle:\n// Is it better to attack, buff, heal, or defend?\n// - health_level (how close a player is to dying)\n// - mana_level (how close a player is to running out of mana)\n// - offensive_level (how many net buffs are on a player)\n// - defensive_level (how many net defenses are on a player)\n\n\n\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,wBAAwB;AAEhD,OAAO,MAAMC,kBAAkB,GAAIC,WAAW,IAAK;EAAA,IAAAC,mBAAA;EACjD,IAAI,EAAED,WAAW,YAAYF,WAAW,CAAC,EAAE;IACzC,MAAM,IAAII,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEA,MAAMC,YAAY,GAAG,mBAAmB;EACxC,MAAMC,MAAM,IAAAH,mBAAA,GAAGD,WAAW,CAACK,MAAM,cAAAJ,mBAAA,uBAAlBA,mBAAA,CAAoBG,MAAM;EAEzC,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,IAAIF,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAO,WAAWE,MAAM,CAACE,IAAI;AAC/B;AACA;AACA,2DAA2DH,YAAY;AACvE;AACA;AACA;AACA,mBAAmBC,MAAM,CAACG,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2BH,MAAM,CAACG,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG,CAAC;AAED,eAAeR,kBAAkB;AAEjC,OAAO,MAAMS,oBAAoB,GAAGA,CAACC,YAAY,EAAEC,UAAU,EAAEC,UAAU,KAAK;EAC5E,OAAO,WAAWF,YAAY,CAACH,IAAI;AACrC,kDAAkDG,YAAY,CAACF,YAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAGA,CAACH,YAAY,EAAEI,SAAS,EAAEC,SAAS,KAAK;EACtE,OAAO;AACX,yBAAyBD,SAAS,CAAC,qBAAqB,CAAC;AACzD,gBAAgBA,SAAS,CAAC,YAAY,CAAC;AACvC,qBAAqBA,SAAS,CAAC,iBAAiB,CAAC;AACjD,qBAAqBA,SAAS,CAAC,iBAAiB,CAAC;AACjD;AACA;AACA,yBAAyBC,SAAS,CAAC,qBAAqB,CAAC;AACzD,gBAAgBA,SAAS,CAAC,YAAY,CAAC;AACvC,qBAAqBA,SAAS,CAAC,iBAAiB,CAAC;AACjD,qBAAqBA,SAAS,CAAC,iBAAiB,CAAC;AACjD;AACA;AACA,EAAED,SAAS,CAAC,mBAAmB,CAAC,CAACE,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK,KAAKA,GAAG,GAAC,CAAC,KAAKD,MAAM,EAAE,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;AACzF;AACA,2DAA2DT,YAAY,CAACF,YAAY,GAAG;AACvF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}