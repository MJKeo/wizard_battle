{"ast":null,"code":"import Heal from \"./heal\";\nimport Defend from \"./defend\";\nimport Spell from \"./spell\";\nimport Element from \"../enums/element\";\nimport SpellType from \"../enums/spellType\";\nimport vary from \"../util/vary\";\nclass Wizard {\n  constructor(name, primary_element, secondary_element, attack, defense, health, healing, arcane, spells, combat_style) {\n    this.name = name;\n    this.primary_element = primary_element;\n    this.secondary_element = secondary_element;\n    this.attack = attack;\n    this.defense = defense;\n    this.health = health;\n    this.healing = healing;\n    this.arcane = arcane;\n    this.spells = spells;\n    this.combat_style = combat_style;\n  }\n  toString() {\n    const header = [`Name: ${this.name}`, `Primary element=${this.primary_element}`, `Secondary element=${this.secondary_element}`, `attack=${this.attack}`, `defense=${this.defense}`, `health=${this.health}`, `healing=${this.healing}`, `arcane=${this.arcane}`, `combat style=${this.combat_style}`, `max hp=${this.max_hp()}`, `damage mult=${this.damage_multiplier()}`, `damage red=${this.damage_reduction()}`, `starting mana=${this.starting_mana()}`, `mpr=${this.mana_per_round()}`].join(\"\\n \");\n    const actions = this.all_actions().map((action, idx) => `Action ${idx + 1}: ${action.overview()}`);\n    const actions_block = actions.join(\"\\n \");\n    return `${header} Available actions:\\n ${actions_block}`;\n  }\n  max_hp(randomFn = Math.random) {\n    const base = 500 * 2 ** this.health ** 2;\n    const varied = vary(base, 0.1, randomFn);\n    return Math.max(1, Math.round(varied));\n  }\n  damage_multiplier() {\n    return 1.25 ** this.attack ** 2;\n  }\n  damage_reduction() {\n    return 1.1 * (8 / 11) ** this.defense ** 1.8;\n  }\n  starting_mana(randomFn = Math.random) {\n    const base = 10 * 2 ** this.arcane ** 1.3;\n    const varied = vary(base, 0.1, randomFn);\n    return Math.max(0, Math.round(varied));\n  }\n  mana_per_round() {\n    const base = 2 * 2.5 ** this.arcane ** 1.15;\n    return Math.round(base);\n  }\n  all_actions() {\n    const spell_priority = {\n      [SpellType.DAMAGE.name]: 0,\n      [SpellType.BUFF.name]: 1,\n      [SpellType.DEBUFF.name]: 2\n    };\n    const sorted_spells = [...this.spells].sort((a, b) => {\n      var _spell_priority$a$spe, _spell_priority$b$spe;\n      const left = (_spell_priority$a$spe = spell_priority[a.spell_type.name]) !== null && _spell_priority$a$spe !== void 0 ? _spell_priority$a$spe : Number.POSITIVE_INFINITY;\n      const right = (_spell_priority$b$spe = spell_priority[b.spell_type.name]) !== null && _spell_priority$b$spe !== void 0 ? _spell_priority$b$spe : Number.POSITIVE_INFINITY;\n      if (left !== right) {\n        return left - right;\n      }\n      return a.name.localeCompare(b.name, undefined, {\n        sensitivity: \"base\"\n      });\n    });\n    const actions = [];\n    actions.push(...sorted_spells);\n    actions.push(new Defend(this.primary_element));\n    actions.push(new Defend(this.secondary_element));\n    actions.push(new Heal(this));\n    return actions;\n  }\n  affordable_actions(mana_cap) {\n    return this.all_actions().filter(action => action.mana_cost() <= mana_cap);\n  }\n  static build_from_json(data) {\n    const required = [\"name\", \"primary_element\", \"secondary_element\", \"attack\", \"defense\", \"health\", \"healing\", \"arcane\", \"combat_style\", \"spells\"];\n    const missing = required.filter(key => !(key in data));\n    if (missing.length > 0) {\n      throw new Error(`Missing keys for Wizard: ${missing.join(\", \")}`);\n    }\n    const spells_payload = data.spells;\n    if (!Array.isArray(spells_payload)) {\n      throw new Error(\"Wizard 'spells' must be a list\");\n    }\n    const spells = spells_payload.map(Spell.build_from_json);\n    return new Wizard(String(data.name), Element.fromName(data.primary_element), Element.fromName(data.secondary_element), Number(data.attack), Number(data.defense), Number(data.health), Number(data.healing), Number(data.arcane), spells, String(data.combat_style));\n  }\n}\nexport default Wizard;","map":{"version":3,"names":["Heal","Defend","Spell","Element","SpellType","vary","Wizard","constructor","name","primary_element","secondary_element","attack","defense","health","healing","arcane","spells","combat_style","toString","header","max_hp","damage_multiplier","damage_reduction","starting_mana","mana_per_round","join","actions","all_actions","map","action","idx","overview","actions_block","randomFn","Math","random","base","varied","max","round","spell_priority","DAMAGE","BUFF","DEBUFF","sorted_spells","sort","a","b","_spell_priority$a$spe","_spell_priority$b$spe","left","spell_type","Number","POSITIVE_INFINITY","right","localeCompare","undefined","sensitivity","push","affordable_actions","mana_cap","filter","mana_cost","build_from_json","data","required","missing","key","length","Error","spells_payload","Array","isArray","String","fromName"],"sources":["/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/classes/wizard.js"],"sourcesContent":["import Heal from \"./heal\";\nimport Defend from \"./defend\";\nimport Spell from \"./spell\";\nimport Element from \"../enums/element\";\nimport SpellType from \"../enums/spellType\";\nimport vary from \"../util/vary\";\n\nclass Wizard {\n  constructor(\n    name,\n    primary_element,\n    secondary_element,\n    attack,\n    defense,\n    health,\n    healing,\n    arcane,\n    spells,\n    combat_style\n  ) {\n    this.name = name;\n    this.primary_element = primary_element;\n    this.secondary_element = secondary_element;\n    this.attack = attack;\n    this.defense = defense;\n    this.health = health;\n    this.healing = healing;\n    this.arcane = arcane;\n    this.spells = spells;\n    this.combat_style = combat_style;\n  }\n\n  toString() {\n    const header = [\n      `Name: ${this.name}`,\n      `Primary element=${this.primary_element}`,\n      `Secondary element=${this.secondary_element}`,\n      `attack=${this.attack}`,\n      `defense=${this.defense}`,\n      `health=${this.health}`,\n      `healing=${this.healing}`,\n      `arcane=${this.arcane}`,\n      `combat style=${this.combat_style}`,\n      `max hp=${this.max_hp()}`,\n      `damage mult=${this.damage_multiplier()}`,\n      `damage red=${this.damage_reduction()}`,\n      `starting mana=${this.starting_mana()}`,\n      `mpr=${this.mana_per_round()}`,\n    ].join(\"\\n \");\n\n    const actions = this.all_actions().map((action, idx) => `Action ${idx + 1}: ${action.overview()}`);\n    const actions_block = actions.join(\"\\n \");\n\n    return `${header} Available actions:\\n ${actions_block}`;\n  }\n\n  max_hp(randomFn = Math.random) {\n    const base = 500 * 2 ** (this.health ** 2);\n    const varied = vary(base, 0.1, randomFn);\n    return Math.max(1, Math.round(varied));\n  }\n\n  damage_multiplier() {\n    return 1.25 ** (this.attack ** 2);\n  }\n\n  damage_reduction() {\n    return 1.1 * (8 / 11) ** (this.defense ** 1.8);\n  }\n\n  starting_mana(randomFn = Math.random) {\n    const base = 10 * 2 ** (this.arcane ** 1.3);\n    const varied = vary(base, 0.1, randomFn);\n    return Math.max(0, Math.round(varied));\n  }\n\n  mana_per_round() {\n    const base = 2 * 2.5 ** (this.arcane ** 1.15);\n    return Math.round(base);\n  }\n\n  all_actions() {\n    const spell_priority = {\n      [SpellType.DAMAGE.name]: 0,\n      [SpellType.BUFF.name]: 1,\n      [SpellType.DEBUFF.name]: 2,\n    };\n\n    const sorted_spells = [...this.spells].sort((a, b) => {\n      const left = spell_priority[a.spell_type.name] ?? Number.POSITIVE_INFINITY;\n      const right = spell_priority[b.spell_type.name] ?? Number.POSITIVE_INFINITY;\n      if (left !== right) {\n        return left - right;\n      }\n      return a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" });\n    });\n\n    const actions = [];\n    actions.push(...sorted_spells);\n    actions.push(new Defend(this.primary_element));\n    actions.push(new Defend(this.secondary_element));\n    actions.push(new Heal(this));\n    return actions;\n  }\n\n  affordable_actions(mana_cap) {\n    return this.all_actions().filter((action) => action.mana_cost() <= mana_cap);\n  }\n\n  static build_from_json(data) {\n    const required = [\n      \"name\",\n      \"primary_element\",\n      \"secondary_element\",\n      \"attack\",\n      \"defense\",\n      \"health\",\n      \"healing\",\n      \"arcane\",\n      \"combat_style\",\n      \"spells\",\n    ];\n\n    const missing = required.filter((key) => !(key in data));\n    if (missing.length > 0) {\n      throw new Error(`Missing keys for Wizard: ${missing.join(\", \")}`);\n    }\n\n    const spells_payload = data.spells;\n    if (!Array.isArray(spells_payload)) {\n      throw new Error(\"Wizard 'spells' must be a list\");\n    }\n\n    const spells = spells_payload.map(Spell.build_from_json);\n\n    return new Wizard(\n      String(data.name),\n      Element.fromName(data.primary_element),\n      Element.fromName(data.secondary_element),\n      Number(data.attack),\n      Number(data.defense),\n      Number(data.health),\n      Number(data.healing),\n      Number(data.arcane),\n      spells,\n      String(data.combat_style)\n    );\n  }\n}\n\nexport default Wizard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}