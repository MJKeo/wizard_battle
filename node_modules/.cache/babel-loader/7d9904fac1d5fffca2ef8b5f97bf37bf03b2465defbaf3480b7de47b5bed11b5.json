{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport combatSystemPrompt from \"./prompts/prompts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatActions = (wizard, currentMana) => {\n  var _wizard$affordable_ac, _wizard$affordable_ac2;\n  if (!wizard) {\n    return [];\n  }\n  const actions = (_wizard$affordable_ac = (_wizard$affordable_ac2 = wizard.affordable_actions) === null || _wizard$affordable_ac2 === void 0 ? void 0 : _wizard$affordable_ac2.call(wizard, currentMana !== null && currentMana !== void 0 ? currentMana : 0)) !== null && _wizard$affordable_ac !== void 0 ? _wizard$affordable_ac : [];\n  return actions.map((action, index) => {\n    var _action$display_card, _card$type, _card$mana_cost, _card$element, _card$description;\n    const card = (_action$display_card = action.display_card) === null || _action$display_card === void 0 ? void 0 : _action$display_card.call(action);\n    if (!card) {\n      return null;\n    }\n    const type = String((_card$type = card.type) !== null && _card$type !== void 0 ? _card$type : \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${(_card$mana_cost = card.mana_cost) !== null && _card$mana_cost !== void 0 ? _card$mana_cost : \"?\"}`;\n    const emoji = type === \"DAMAGE\" ? \"💥\" : type === \"BUFF\" ? \"📈\" : type === \"DEBUFF\" ? \"📉\" : type === \"HEAL\" ? \"🍃\" : type === \"DEFENSE\" ? \"🛡️\" : \"\";\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = (_card$element = card.element) !== null && _card$element !== void 0 ? _card$element : null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = (_card$description = card.description) !== null && _card$description !== void 0 ? _card$description : \"\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `spell-card ${type === \"HEAL\" ? \"spell-card-heal\" : type === \"DEFENSE\" ? \"spell-card-defense\" : \"spell-card-spell\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-left\",\n          children: [elementClass && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: elementClass,\n            children: elementLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__name\",\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta spell-card__meta--range\",\n            children: rangeLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: accuracyLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: manaCostLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, `${card.name}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  });\n};\nconst StatCircles = ({\n  current,\n  max,\n  color\n}) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-horizontal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat-horizontal__meter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-horizontal__fill\",\n        style: {\n          width: `${percent * 100}%`,\n          backgroundColor: color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-horizontal__value\",\n          children: `${clampedCurrent}/${clampedMax}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_c = StatCircles;\nconst HorizontalStatBars = ({\n  state\n}) => {\n  const stats = [{\n    key: \"attack\",\n    label: \"Attack\",\n    color: \"#f87171\"\n  }, {\n    key: \"defense\",\n    label: \"Defense\",\n    color: \"#60a5fa\"\n  }, {\n    key: \"healing\",\n    label: \"Healing\",\n    color: \"#34d399\"\n  }, {\n    key: \"arcane\",\n    label: \"Arcane\",\n    color: \"#c084fc\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-bars\",\n    children: stats.map(({\n      key,\n      label,\n      color\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stat-label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-meter\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-meter__fill\",\n          style: {\n            width: `${Math.min(1, Math.max(0, state.player.wizard[key])) * 100}%`,\n            backgroundColor: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_c2 = HorizontalStatBars;\nconst BattleColumn = ({\n  actions,\n  wizardState\n}) => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: \"battle-column\",\n  children: [/*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"battle-column__header\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: wizardState.player.wizard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-column__content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__resource-bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Health\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_health,\n            max: wizardState.max_health,\n            color: \"#b91c1c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Mana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_mana,\n            max: 25,\n            color: \"#a855f7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalStatBars, {\n          state: wizardState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"battle-section-title battle-section-title--spells\",\n        children: \"Spells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-cards\",\n        children: actions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 111,\n  columnNumber: 3\n}, this);\n_c3 = BattleColumn;\nconst Battle = ({\n  playerOneWizard,\n  playerTwoWizard,\n  onReset,\n  apiBaseUrl\n}) => {\n  _s();\n  var _playerStates$, _playerStates$2;\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n  const appendToLog = useCallback(entry => {\n    setBattleLog(prev => [entry, ...prev]);\n  }, []);\n  const fetchActionForCurrentActor = useCallback(async function fetchAction(autoExecute = false) {\n    var _currentState$player_, _currentState$player_2, _actingState$player$w, _actingState$player, _actingState$player$w2, _actingState$player$w3, _actingState$current_;\n    if (cancelledRef.current || winnerRef.current || isFetchingActionRef.current || pendingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    const actingIndex = actingIndexRef.current;\n    const actingState = (_currentState$player_ = currentState.player_states) === null || _currentState$player_ === void 0 ? void 0 : _currentState$player_[actingIndex];\n    const enemyState = (_currentState$player_2 = currentState.player_states) === null || _currentState$player_2 === void 0 ? void 0 : _currentState$player_2[1 - actingIndex];\n    if (!actingState || !enemyState) {\n      if (!cancelledRef.current) {\n        appendToLog({\n          title: \"Error\",\n          content: \"Invalid game state\"\n        });\n      }\n      return;\n    }\n    const validActions = (_actingState$player$w = (_actingState$player = actingState.player) === null || _actingState$player === void 0 ? void 0 : (_actingState$player$w2 = _actingState$player.wizard) === null || _actingState$player$w2 === void 0 ? void 0 : (_actingState$player$w3 = _actingState$player$w2.affordable_actions) === null || _actingState$player$w3 === void 0 ? void 0 : _actingState$player$w3.call(_actingState$player$w2, (_actingState$current_ = actingState.current_mana) !== null && _actingState$current_ !== void 0 ? _actingState$current_ : 0)) !== null && _actingState$player$w !== void 0 ? _actingState$player$w : [];\n    if (!validActions.length) {\n      var _currentState$increme, _currentState$get_win;\n      if (!cancelledRef.current) {\n        appendToLog({\n          title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n          content: \"No valid actions available. Skipping turn.\"\n        });\n      }\n      (_currentState$increme = currentState.increment_mana) === null || _currentState$increme === void 0 ? void 0 : _currentState$increme.call(currentState);\n      if (!cancelledRef.current) {\n        setPlayerStates([...currentState.player_states]);\n      }\n      actingIndexRef.current = 1 - actingIndex;\n      turnRef.current += 1;\n      const winnerAfterSkip = (_currentState$get_win = currentState.get_winner) === null || _currentState$get_win === void 0 ? void 0 : _currentState$get_win.call(currentState);\n      if (winnerAfterSkip) {\n        winnerRef.current = winnerAfterSkip;\n        if (!cancelledRef.current) {\n          setWinner(winnerAfterSkip);\n          appendToLog({\n            title: \"Battle Complete\",\n            content: `${winnerAfterSkip.name} wins!`\n          });\n        }\n        return;\n      }\n      return fetchAction(autoExecute);\n    }\n    setIsFetchingAction(true);\n    isFetchingActionRef.current = true;\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    const controller = new AbortController();\n    controllerRef.current = controller;\n    try {\n      var _ref, _selectedAction$name, _selectedAction$const;\n      const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          system_prompt: combatSystemPrompt(actingState),\n          user_prompt: currentState.battleSnapshot(actingIndex)\n        }),\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      const rawAction = data === null || data === void 0 ? void 0 : data.action;\n      const parsedIndex = typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n      if (!Number.isFinite(parsedIndex)) {\n        if (!cancelledRef.current) {\n          appendToLog({\n            title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n            content: `Invalid action index returned: ${JSON.stringify(data)}`\n          });\n        }\n        return;\n      }\n      const adjustedIndex = parsedIndex - 1;\n      if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n        if (!cancelledRef.current) {\n          appendToLog({\n            title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n            content: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`\n          });\n        }\n        return;\n      }\n      const selectedAction = validActions[adjustedIndex];\n      const turnData = {\n        actingIndex,\n        turn: turnRef.current,\n        actingWizardName: actingState.player.wizard.name,\n        selectedAction,\n        actionName: (_ref = (_selectedAction$name = selectedAction === null || selectedAction === void 0 ? void 0 : selectedAction.name) !== null && _selectedAction$name !== void 0 ? _selectedAction$name : selectedAction === null || selectedAction === void 0 ? void 0 : (_selectedAction$const = selectedAction.constructor) === null || _selectedAction$const === void 0 ? void 0 : _selectedAction$const.name) !== null && _ref !== void 0 ? _ref : \"Action\"\n      };\n      pendingActionRef.current = turnData;\n      if (!cancelledRef.current) {\n        setPendingAction(turnData);\n        setShouldAutoResolve(autoExecute || autoProgressRef.current);\n      }\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\" || cancelledRef.current) {\n        return;\n      }\n      appendToLog({\n        title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n        content: `Error during action generation: ${String(error)}`\n      });\n    } finally {\n      if (controllerRef.current === controller) {\n        controllerRef.current = null;\n      }\n      isFetchingActionRef.current = false;\n      if (!cancelledRef.current) {\n        setIsFetchingAction(false);\n      }\n    }\n  }, [appendToLog, setPlayerStates, setWinner]);\n  const executeAction = useCallback(actionData => {\n    if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    setShouldAutoResolve(false);\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setIsExecutingAction(true);\n    isExecutingActionRef.current = true;\n    let continueBattle = true;\n    try {\n      var _currentState$perform, _currentState$increme2, _actionData$selectedA, _currentState$get_win2;\n      const announcement = (_currentState$perform = currentState.perform_action(actionData.actingIndex, actionData.selectedAction)) !== null && _currentState$perform !== void 0 ? _currentState$perform : \"\";\n      (_currentState$increme2 = currentState.increment_mana) === null || _currentState$increme2 === void 0 ? void 0 : _currentState$increme2.call(currentState);\n      if (!cancelledRef.current) {\n        setPlayerStates([...currentState.player_states]);\n      }\n      const actionSummary = typeof ((_actionData$selectedA = actionData.selectedAction) === null || _actionData$selectedA === void 0 ? void 0 : _actionData$selectedA.overview) === \"function\" ? actionData.selectedAction.overview() : actionData.actionName;\n      if (!cancelledRef.current) {\n        const content = [actionSummary, announcement].filter(Boolean).join(\"\\n\");\n        appendToLog({\n          title: `Turn ${actionData.turn}: ${actionData.actingWizardName}`,\n          content: content || actionSummary\n        });\n      }\n      const winnerAfterAction = (_currentState$get_win2 = currentState.get_winner) === null || _currentState$get_win2 === void 0 ? void 0 : _currentState$get_win2.call(currentState);\n      if (winnerAfterAction) {\n        winnerRef.current = winnerAfterAction;\n        continueBattle = false;\n        if (!cancelledRef.current) {\n          setWinner(winnerAfterAction);\n          appendToLog({\n            title: \"Battle Complete\",\n            content: `${winnerAfterAction.name} wins!`\n          });\n        }\n      } else {\n        actingIndexRef.current = 1 - actionData.actingIndex;\n        turnRef.current = actionData.turn + 1;\n      }\n    } catch (error) {\n      continueBattle = false;\n      if (!cancelledRef.current) {\n        appendToLog({\n          title: `Turn ${actionData.turn}: ${actionData.actingWizardName}`,\n          content: `Action failed: ${String(error)}`\n        });\n      }\n    } finally {\n      if (!cancelledRef.current) {\n        setIsExecutingAction(false);\n      }\n      isExecutingActionRef.current = false;\n      if (continueBattle && !cancelledRef.current) {\n        fetchActionForCurrentActor(autoProgressRef.current);\n      }\n    }\n  }, [appendToLog, fetchActionForCurrentActor, setPlayerStates, setWinner]);\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n    fetchActionForCurrentActor(true);\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n  const handleNextMove = useCallback(() => {\n    if (!pendingAction || autoProgress || winner || isFetchingAction || isExecutingAction || cancelledRef.current) {\n      return;\n    }\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress(prev => !prev);\n  }, [winner]);\n  const playerOneState = (_playerStates$ = playerStates[0]) !== null && _playerStates$ !== void 0 ? _playerStates$ : null;\n  const playerTwoState = (_playerStates$2 = playerStates[1]) !== null && _playerStates$2 !== void 0 ? _playerStates$2 : null;\n  const nextMoveDisabled = !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${autoProgress ? \"\" : \"button-outline\"}`;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"battle-layout\",\n    children: [playerOneState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerOneState,\n      actions: formatActions(playerOneState.player.wizard, playerOneState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"battle-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prompt-button button-outline battle-reset\",\n        type: \"button\",\n        onClick: onReset,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prompt-button battle-controls__primary\",\n          type: \"button\",\n          onClick: handleNextMove,\n          disabled: nextMoveDisabled,\n          children: \"Next Move\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: autoProgressButtonClass,\n          type: \"button\",\n          onClick: toggleAutoProgress,\n          disabled: autoProgressDisabled,\n          children: `Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-log__content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Battle Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), winner && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__winner\",\n          children: [\"Winner: \", winner.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 22\n        }, this), battleLog.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__empty\",\n          children: isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this) : battleLog.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-log__entry\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: entry.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"api-result__pre\",\n            children: entry.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 17\n          }, this)]\n        }, `${entry.title}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this), playerTwoState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerTwoState,\n      actions: formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 526,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"W550x1ZYsPF31oHKwcSOhYfQC9w=\");\n_c4 = Battle;\nexport default Battle;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatCircles\");\n$RefreshReg$(_c2, \"HorizontalStatBars\");\n$RefreshReg$(_c3, \"BattleColumn\");\n$RefreshReg$(_c4, \"Battle\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","GameState","combatSystemPrompt","jsxDEV","_jsxDEV","formatActions","wizard","currentMana","_wizard$affordable_ac","_wizard$affordable_ac2","actions","affordable_actions","call","map","action","index","_action$display_card","_card$type","_card$mana_cost","_card$element","_card$description","card","display_card","type","String","toUpperCase","manaCostLabel","mana_cost","emoji","rangeLabel","Array","isArray","range","length","min","max","trim","accuracyLabel","accuracy","Math","round","elementLabel","element","elementClass","toLowerCase","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","StatCircles","current","color","clampedCurrent","clampedMax","percent","style","width","backgroundColor","_c","HorizontalStatBars","state","stats","key","label","player","_c2","BattleColumn","wizardState","current_health","max_health","current_mana","_c3","Battle","playerOneWizard","playerTwoWizard","onReset","apiBaseUrl","_s","_playerStates$","_playerStates$2","gameStateRef","controllerRef","cancelledRef","baseUrlRef","actingIndexRef","turnRef","autoProgressRef","isFetchingActionRef","pendingActionRef","winnerRef","isExecutingActionRef","playerStates","setPlayerStates","battleLog","setBattleLog","winner","setWinner","autoProgress","setAutoProgress","pendingAction","setPendingAction","isFetchingAction","setIsFetchingAction","isExecutingAction","setIsExecutingAction","shouldAutoResolve","setShouldAutoResolve","appendToLog","entry","prev","fetchActionForCurrentActor","fetchAction","autoExecute","_currentState$player_","_currentState$player_2","_actingState$player$w","_actingState$player","_actingState$player$w2","_actingState$player$w3","_actingState$current_","currentState","actingIndex","actingState","player_states","enemyState","title","content","validActions","_currentState$increme","_currentState$get_win","increment_mana","winnerAfterSkip","get_winner","controller","AbortController","_ref","_selectedAction$name","_selectedAction$const","response","fetch","method","headers","body","JSON","stringify","system_prompt","user_prompt","battleSnapshot","signal","ok","errorText","text","Error","status","data","json","rawAction","parsedIndex","Number","parseInt","isFinite","adjustedIndex","selectedAction","turnData","turn","actingWizardName","actionName","constructor","error","executeAction","actionData","continueBattle","_currentState$perform","_currentState$increme2","_actionData$selectedA","_currentState$get_win2","announcement","perform_action","actionSummary","overview","filter","Boolean","join","winnerAfterAction","undefined","abort","initialize","handleNextMove","toggleAutoProgress","playerOneState","playerTwoState","nextMoveDisabled","autoProgressDisabled","autoProgressButtonClass","onClick","disabled","_c4","$RefreshReg$"],"sources":["/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport combatSystemPrompt from \"./prompts/prompts\";\n\nconst formatActions = (wizard, currentMana) => {\n  if (!wizard) {\n    return [];\n  }\n\n  const actions = wizard.affordable_actions?.(currentMana ?? 0) ?? [];\n  return actions.map((action, index) => {\n    const card = action.display_card?.();\n    if (!card) {\n      return null;\n    }\n\n    const type = String(card.type ?? \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${card.mana_cost ?? \"?\"}`;\n    const emoji =\n      type === \"DAMAGE\"\n        ? \"💥\"\n        : type === \"BUFF\"\n        ? \"📈\"\n        : type === \"DEBUFF\"\n        ? \"📉\"\n        : type === \"HEAL\"\n        ? \"🍃\"\n        : type === \"DEFENSE\"\n        ? \"🛡️\"\n        : \"\";\n\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = card.element ?? null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = card.description ?? \"\";\n\n    return (\n      <div key={`${card.name}-${index}`} className={`spell-card ${type === \"HEAL\" ? \"spell-card-heal\" : type === \"DEFENSE\" ? \"spell-card-defense\" : \"spell-card-spell\"}`}>\n        <div className=\"spell-card__row\">\n          <div className=\"spell-card__primary-left\">\n            {elementClass && <span className={elementClass}>{elementLabel}</span>}\n            <span className=\"spell-card__name\">{card.name}</span>\n          </div>\n          <div className=\"spell-card__primary-right\">\n            <span className=\"spell-card__meta spell-card__meta--range\">{rangeLabel}</span>\n            <span className=\"spell-card__meta\">{accuracyLabel}</span>\n            <span className=\"spell-card__meta\">{manaCostLabel}</span>\n          </div>\n        </div>\n      </div>\n    );\n  });\n};\n\nconst StatCircles = ({ current, max, color }) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n\n  return (\n    <div className=\"stat-horizontal\">\n      <div className=\"stat-horizontal__meter\">\n        <div\n          className=\"stat-horizontal__fill\"\n          style={{ width: `${percent * 100}%`, backgroundColor: color }}\n        >\n          <span className=\"stat-horizontal__value\">{`${clampedCurrent}/${clampedMax}`}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HorizontalStatBars = ({ state }) => {\n  const stats = [\n    { key: \"attack\", label: \"Attack\", color: \"#f87171\" },\n    { key: \"defense\", label: \"Defense\", color: \"#60a5fa\" },\n    { key: \"healing\", label: \"Healing\", color: \"#34d399\" },\n    { key: \"arcane\", label: \"Arcane\", color: \"#c084fc\" },\n  ];\n\n  return (\n    <div className=\"stat-bars\">\n      {stats.map(({ key, label, color }) => (\n        <div key={key} className=\"stat-row\">\n          <span className=\"stat-label\">{label}</span>\n          <div className=\"stat-meter\">\n            <div\n              className=\"stat-meter__fill\"\n              style={{ width: `${Math.min(1, Math.max(0, state.player.wizard[key])) * 100}%`, backgroundColor: color }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst BattleColumn = ({ actions, wizardState }) => (\n  <section className=\"battle-column\">\n    <header className=\"battle-column__header\">\n      <h2>{wizardState.player.wizard.name}</h2>\n    </header>\n    <div className=\"battle-column__content\">\n      <div className=\"battle-stats\">\n        <div className=\"battle-stats__resource-bars\">\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Health</span>\n            <StatCircles current={wizardState.current_health} max={wizardState.max_health} color=\"#b91c1c\" />\n          </div>\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Mana</span>\n            <StatCircles current={wizardState.current_mana} max={25} color=\"#a855f7\" />\n          </div>\n        </div>\n        <div className=\"battle-stats__bars\">\n          <h4 className=\"battle-section-title\">Stats</h4>\n          <HorizontalStatBars state={wizardState} />\n        </div>\n      </div>\n      <div className=\"battle-actions\">\n        <h4 className=\"battle-section-title battle-section-title--spells\">Spells</h4>\n        <div className=\"spell-cards\">{actions}</div>\n      </div>\n    </div>\n  </section>\n);\n\nconst Battle = ({ playerOneWizard, playerTwoWizard, onReset, apiBaseUrl }) => {\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl ?? \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl ?? \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n\n  const appendToLog = useCallback((entry) => {\n    setBattleLog((prev) => [entry, ...prev]);\n  }, []);\n\n  const fetchActionForCurrentActor = useCallback(\n    async function fetchAction(autoExecute = false) {\n      if (\n        cancelledRef.current ||\n        winnerRef.current ||\n        isFetchingActionRef.current ||\n        pendingActionRef.current\n      ) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      const actingIndex = actingIndexRef.current;\n      const actingState = currentState.player_states?.[actingIndex];\n      const enemyState = currentState.player_states?.[1 - actingIndex];\n\n      if (!actingState || !enemyState) {\n        if (!cancelledRef.current) {\n          appendToLog({ title: \"Error\", content: \"Invalid game state\" });\n        }\n        return;\n      }\n\n      const validActions =\n        actingState.player?.wizard?.affordable_actions?.(actingState.current_mana ?? 0) ?? [];\n\n      if (!validActions.length) {\n        if (!cancelledRef.current) {\n          appendToLog({\n            title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n            content: \"No valid actions available. Skipping turn.\",\n          });\n        }\n\n        currentState.increment_mana?.();\n        if (!cancelledRef.current) {\n          setPlayerStates([...currentState.player_states]);\n        }\n\n        actingIndexRef.current = 1 - actingIndex;\n        turnRef.current += 1;\n\n        const winnerAfterSkip = currentState.get_winner?.();\n        if (winnerAfterSkip) {\n          winnerRef.current = winnerAfterSkip;\n          if (!cancelledRef.current) {\n            setWinner(winnerAfterSkip);\n            appendToLog({\n              title: \"Battle Complete\",\n              content: `${winnerAfterSkip.name} wins!`,\n            });\n          }\n          return;\n        }\n\n        return fetchAction(autoExecute);\n      }\n\n      setIsFetchingAction(true);\n      isFetchingActionRef.current = true;\n      setPendingAction(null);\n      pendingActionRef.current = null;\n\n      const controller = new AbortController();\n      controllerRef.current = controller;\n\n      try {\n        const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            system_prompt: combatSystemPrompt(actingState),\n            user_prompt: currentState.battleSnapshot(actingIndex),\n          }),\n          signal: controller.signal,\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n        }\n\n        const data = await response.json();\n        const rawAction = data?.action;\n        const parsedIndex =\n          typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n\n        if (!Number.isFinite(parsedIndex)) {\n          if (!cancelledRef.current) {\n            appendToLog({\n              title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n              content: `Invalid action index returned: ${JSON.stringify(data)}`,\n            });\n          }\n          return;\n        }\n\n        const adjustedIndex = parsedIndex - 1;\n        if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n          if (!cancelledRef.current) {\n            appendToLog({\n              title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n              content: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`,\n            });\n          }\n          return;\n        }\n\n        const selectedAction = validActions[adjustedIndex];\n\n        const turnData = {\n          actingIndex,\n          turn: turnRef.current,\n          actingWizardName: actingState.player.wizard.name,\n          selectedAction,\n          actionName:\n            selectedAction?.name ?? selectedAction?.constructor?.name ?? \"Action\",\n        };\n\n        pendingActionRef.current = turnData;\n        if (!cancelledRef.current) {\n          setPendingAction(turnData);\n          setShouldAutoResolve(autoExecute || autoProgressRef.current);\n        }\n      } catch (error) {\n        if (error?.name === \"AbortError\" || cancelledRef.current) {\n          return;\n        }\n\n        appendToLog({\n          title: `Turn ${turnRef.current}: ${actingState.player.wizard.name}`,\n          content: `Error during action generation: ${String(error)}`,\n        });\n      } finally {\n        if (controllerRef.current === controller) {\n          controllerRef.current = null;\n        }\n\n        isFetchingActionRef.current = false;\n        if (!cancelledRef.current) {\n          setIsFetchingAction(false);\n        }\n      }\n    },\n    [appendToLog, setPlayerStates, setWinner]\n  );\n\n  const executeAction = useCallback(\n    (actionData) => {\n      if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      setShouldAutoResolve(false);\n      setPendingAction(null);\n      pendingActionRef.current = null;\n\n      setIsExecutingAction(true);\n      isExecutingActionRef.current = true;\n\n      let continueBattle = true;\n\n      try {\n        const announcement =\n          currentState.perform_action(actionData.actingIndex, actionData.selectedAction) ?? \"\";\n\n        currentState.increment_mana?.();\n        if (!cancelledRef.current) {\n          setPlayerStates([...currentState.player_states]);\n        }\n\n        const actionSummary =\n          typeof actionData.selectedAction?.overview === \"function\"\n            ? actionData.selectedAction.overview()\n            : actionData.actionName;\n\n        if (!cancelledRef.current) {\n          const content = [actionSummary, announcement].filter(Boolean).join(\"\\n\");\n          appendToLog({\n            title: `Turn ${actionData.turn}: ${actionData.actingWizardName}`,\n            content: content || actionSummary,\n          });\n        }\n\n        const winnerAfterAction = currentState.get_winner?.();\n        if (winnerAfterAction) {\n          winnerRef.current = winnerAfterAction;\n          continueBattle = false;\n\n          if (!cancelledRef.current) {\n            setWinner(winnerAfterAction);\n            appendToLog({\n              title: \"Battle Complete\",\n              content: `${winnerAfterAction.name} wins!`,\n            });\n          }\n        } else {\n          actingIndexRef.current = 1 - actionData.actingIndex;\n          turnRef.current = actionData.turn + 1;\n        }\n      } catch (error) {\n        continueBattle = false;\n        if (!cancelledRef.current) {\n          appendToLog({\n            title: `Turn ${actionData.turn}: ${actionData.actingWizardName}`,\n            content: `Action failed: ${String(error)}`,\n          });\n        }\n      } finally {\n        if (!cancelledRef.current) {\n          setIsExecutingAction(false);\n        }\n        isExecutingActionRef.current = false;\n\n        if (continueBattle && !cancelledRef.current) {\n          fetchActionForCurrentActor(autoProgressRef.current);\n        }\n      }\n    },\n    [appendToLog, fetchActionForCurrentActor, setPlayerStates, setWinner]\n  );\n\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n\n    fetchActionForCurrentActor(true);\n\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n\n  const handleNextMove = useCallback(() => {\n    if (\n      !pendingAction ||\n      autoProgress ||\n      winner ||\n      isFetchingAction ||\n      isExecutingAction ||\n      cancelledRef.current\n    ) {\n      return;\n    }\n\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress((prev) => !prev);\n  }, [winner]);\n\n  const playerOneState = playerStates[0] ?? null;\n  const playerTwoState = playerStates[1] ?? null;\n\n  const nextMoveDisabled =\n    !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${\n    autoProgress ? \"\" : \"button-outline\"\n  }`;\n\n  return (\n    <section className=\"battle-layout\">\n      {playerOneState && (\n        <BattleColumn\n          wizardState={playerOneState}\n          actions={formatActions(playerOneState.player.wizard, playerOneState.current_mana)}\n        />\n      )}\n\n      <section className=\"battle-log\">\n        <button className=\"prompt-button button-outline battle-reset\" type=\"button\" onClick={onReset}>\n          Start Over\n        </button>\n        <div className=\"battle-controls\">\n          <button\n            className=\"prompt-button battle-controls__primary\"\n            type=\"button\"\n            onClick={handleNextMove}\n            disabled={nextMoveDisabled}\n          >\n            Next Move\n          </button>\n          <button\n            className={autoProgressButtonClass}\n            type=\"button\"\n            onClick={toggleAutoProgress}\n            disabled={autoProgressDisabled}\n          >\n            {`Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`}\n          </button>\n        </div>\n        <div className=\"battle-log__content\">\n          <h2>Battle Log</h2>\n          {winner && <p className=\"battle-log__winner\">Winner: {winner.name}</p>}\n          {battleLog.length === 0 ? (\n            <p className=\"battle-log__empty\">\n              {isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"}\n            </p>\n          ) : (\n            battleLog.map((entry, index) => (\n              <div key={`${entry.title}-${index}`} className=\"battle-log__entry\">\n                <h3>{entry.title}</h3>\n                <pre className=\"api-result__pre\">{entry.content}</pre>\n              </div>\n            ))\n          )}\n        </div>\n      </section>\n\n      {playerTwoState && (\n        <BattleColumn\n          wizardState={playerTwoState}\n          actions={formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Battle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}