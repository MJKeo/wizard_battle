{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport combatSystemPrompt from \"./prompts/prompts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatActions = (wizard, currentMana) => {\n  var _wizard$all_actions, _wizard$all_actions2;\n  if (!wizard) {\n    return [];\n  }\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = (_wizard$all_actions = (_wizard$all_actions2 = wizard.all_actions) === null || _wizard$all_actions2 === void 0 ? void 0 : _wizard$all_actions2.call(wizard)) !== null && _wizard$all_actions !== void 0 ? _wizard$all_actions : [];\n  return actions.map((action, index) => {\n    var _action$display_card, _card$type, _card$mana_cost, _card$element, _card$description;\n    const card = (_action$display_card = action.display_card) === null || _action$display_card === void 0 ? void 0 : _action$display_card.call(action);\n    if (!card) {\n      return null;\n    }\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n    const type = String((_card$type = card.type) !== null && _card$type !== void 0 ? _card$type : \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${(_card$mana_cost = card.mana_cost) !== null && _card$mana_cost !== void 0 ? _card$mana_cost : \"?\"}`;\n    const emoji = type === \"DAMAGE\" ? \"💥\" : type === \"BUFF\" ? \"📈\" : type === \"DEBUFF\" ? \"📉\" : type === \"HEAL\" ? \"🍃\" : type === \"DEFENSE\" ? \"🛡️\" : \"\";\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = (_card$element = card.element) !== null && _card$element !== void 0 ? _card$element : null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = (_card$description = card.description) !== null && _card$description !== void 0 ? _card$description : \"\";\n    const cardClassName = [\"spell-card\", type === \"HEAL\" ? \"spell-card-heal\" : type === \"DEFENSE\" ? \"spell-card-defense\" : \"spell-card-spell\", !isAffordable ? \"spell-card--unavailable\" : null].filter(Boolean).join(\" \");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cardClassName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-left\",\n          children: [elementClass && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: elementClass,\n            children: elementLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__name\",\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta spell-card__meta--range\",\n            children: rangeLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: accuracyLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: manaCostLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), description && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row spell-card__row--description\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"spell-card__description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, `${card.name}-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  });\n};\nconst StatCircles = ({\n  current,\n  max,\n  color\n}) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-horizontal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat-horizontal__meter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-horizontal__fill\",\n        style: {\n          width: `${percent * 100}%`,\n          backgroundColor: color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-horizontal__value\",\n          children: `${clampedCurrent}/${clampedMax}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_c = StatCircles;\nconst HorizontalStatBars = ({\n  state\n}) => {\n  const stats = [{\n    key: \"attack\",\n    label: \"Attack\",\n    color: \"#f87171\"\n  }, {\n    key: \"defense\",\n    label: \"Defense\",\n    color: \"#60a5fa\"\n  }, {\n    key: \"healing\",\n    label: \"Healing\",\n    color: \"#34d399\"\n  }, {\n    key: \"arcane\",\n    label: \"Arcane\",\n    color: \"#c084fc\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-bars\",\n    children: stats.map(({\n      key,\n      label,\n      color\n    }) => {\n      var _state$player$wizard$;\n      const rawValue = Math.min(1, Math.max(0, (_state$player$wizard$ = state.player.wizard[key]) !== null && _state$player$wizard$ !== void 0 ? _state$player$wizard$ : 0));\n      const percent = Math.round(rawValue * 100);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-meter\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-meter__fill\",\n            style: {\n              width: `${percent}%`,\n              backgroundColor: color\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-meter__value\",\n              children: [percent, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_c2 = HorizontalStatBars;\nconst BattleColumn = ({\n  actions,\n  wizardState\n}) => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: \"battle-column\",\n  children: [/*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"battle-column__header\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: wizardState.player.wizard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-column__content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__resource-bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Health\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_health,\n            max: wizardState.max_health,\n            color: \"#b91c1c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Mana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_mana,\n            max: 25,\n            color: \"#a855f7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalStatBars, {\n          state: wizardState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"battle-section-title battle-section-title--spells\",\n        children: \"Spells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-cards\",\n        children: actions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 140,\n  columnNumber: 3\n}, this);\n_c3 = BattleColumn;\nconst Battle = ({\n  playerOneWizard,\n  playerTwoWizard,\n  onReset,\n  apiBaseUrl\n}) => {\n  _s();\n  var _playerStates$, _playerStates$2;\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n  const loggedTurnRef = useRef(0);\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n  const appendToLog = useCallback(entry => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog(prev => [entry, ...prev]);\n  }, []);\n  const fetchActionForCurrentActor = useCallback(async function fetchAction(autoExecute = false) {\n    var _currentState$player_, _currentState$player_2, _actingState$player$w, _actingState$player, _actingState$player$w2, _actingState$player$w3, _actingState$current_;\n    if (cancelledRef.current || winnerRef.current || isFetchingActionRef.current || pendingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    const actingIndex = actingIndexRef.current;\n    const actingState = (_currentState$player_ = currentState.player_states) === null || _currentState$player_ === void 0 ? void 0 : _currentState$player_[actingIndex];\n    const enemyState = (_currentState$player_2 = currentState.player_states) === null || _currentState$player_2 === void 0 ? void 0 : _currentState$player_2[1 - actingIndex];\n    if (!actingState || !enemyState) {\n      appendToLog(\"Invalid game state\");\n      return;\n    }\n    if (actingIndex === 0 && turnRef.current > loggedTurnRef.current) {\n      appendToLog(`Turn ${turnRef.current}`);\n      loggedTurnRef.current = turnRef.current;\n    }\n    const validActions = (_actingState$player$w = (_actingState$player = actingState.player) === null || _actingState$player === void 0 ? void 0 : (_actingState$player$w2 = _actingState$player.wizard) === null || _actingState$player$w2 === void 0 ? void 0 : (_actingState$player$w3 = _actingState$player$w2.affordable_actions) === null || _actingState$player$w3 === void 0 ? void 0 : _actingState$player$w3.call(_actingState$player$w2, (_actingState$current_ = actingState.current_mana) !== null && _actingState$current_ !== void 0 ? _actingState$current_ : 0)) !== null && _actingState$player$w !== void 0 ? _actingState$player$w : [];\n    if (!validActions.length) {\n      var _currentState$increme, _currentState$get_win;\n      appendToLog(\"No valid actions available. Skipping turn.\");\n      (_currentState$increme = currentState.increment_mana) === null || _currentState$increme === void 0 ? void 0 : _currentState$increme.call(currentState);\n      setPlayerStates([...currentState.player_states]);\n      actingIndexRef.current = 1 - actingIndex;\n      turnRef.current += 1;\n      if (actingIndexRef.current === 0 && turnRef.current > loggedTurnRef.current) {\n        appendToLog(`Turn ${turnRef.current}`);\n        loggedTurnRef.current = turnRef.current;\n      }\n      const winnerAfterSkip = (_currentState$get_win = currentState.get_winner) === null || _currentState$get_win === void 0 ? void 0 : _currentState$get_win.call(currentState);\n      if (winnerAfterSkip) {\n        winnerRef.current = winnerAfterSkip;\n        setWinner(winnerAfterSkip);\n        appendToLog(`${winnerAfterSkip.name} wins!`);\n        return;\n      }\n      return fetchAction(autoExecute);\n    }\n    setIsFetchingAction(true);\n    isFetchingActionRef.current = true;\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setGeneratingWizardName(actingState.player.wizard.name);\n    const controller = new AbortController();\n    controllerRef.current = controller;\n    try {\n      var _ref, _selectedAction$name, _selectedAction$const;\n      const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          system_prompt: combatSystemPrompt(actingState),\n          user_prompt: currentState.battleSnapshot(actingIndex)\n        }),\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      const rawAction = data === null || data === void 0 ? void 0 : data.action;\n      const parsedIndex = typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n      if (!Number.isFinite(parsedIndex)) {\n        appendToLog(`Invalid action index returned: ${JSON.stringify(data)}`);\n        return;\n      }\n      const adjustedIndex = parsedIndex - 1;\n      if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n        appendToLog(`Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`);\n        return;\n      }\n      const selectedAction = validActions[adjustedIndex];\n      const turnData = {\n        actingIndex,\n        turn: turnRef.current,\n        actingWizardName: actingState.player.wizard.name,\n        selectedAction,\n        actionName: (_ref = (_selectedAction$name = selectedAction === null || selectedAction === void 0 ? void 0 : selectedAction.name) !== null && _selectedAction$name !== void 0 ? _selectedAction$name : selectedAction === null || selectedAction === void 0 ? void 0 : (_selectedAction$const = selectedAction.constructor) === null || _selectedAction$const === void 0 ? void 0 : _selectedAction$const.name) !== null && _ref !== void 0 ? _ref : \"Action\"\n      };\n      pendingActionRef.current = turnData;\n      setPendingAction(turnData);\n      setShouldAutoResolve(autoExecute || autoProgressRef.current);\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\" || cancelledRef.current) {\n        return;\n      }\n      appendToLog(`Error during action generation: ${String(error)}`);\n    } finally {\n      if (controllerRef.current === controller) {\n        controllerRef.current = null;\n      }\n      isFetchingActionRef.current = false;\n      setIsFetchingAction(false);\n      setGeneratingWizardName(null);\n    }\n  }, [appendToLog, setPlayerStates, setWinner]);\n  const executeAction = useCallback(actionData => {\n    if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    setShouldAutoResolve(false);\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setIsExecutingAction(true);\n    isExecutingActionRef.current = true;\n    let continueBattle = true;\n    try {\n      var _currentState$perform, _currentState$get_win2;\n      const announcement = (_currentState$perform = currentState.perform_action(actionData.actingIndex, actionData.selectedAction)) !== null && _currentState$perform !== void 0 ? _currentState$perform : \"\";\n      setPlayerStates([...currentState.player_states]);\n      appendToLog(`${announcement}\\n`);\n      const winnerAfterAction = (_currentState$get_win2 = currentState.get_winner) === null || _currentState$get_win2 === void 0 ? void 0 : _currentState$get_win2.call(currentState);\n      if (winnerAfterAction) {\n        winnerRef.current = winnerAfterAction;\n        continueBattle = false;\n        setWinner(winnerAfterAction);\n        appendToLog(`${winnerAfterAction.name} wins!`);\n      } else {\n        actingIndexRef.current = 1 - actionData.actingIndex;\n        turnRef.current = actionData.turn + 1;\n      }\n    } catch (error) {\n      continueBattle = false;\n      appendToLog(`Action failed: ${String(error)}`);\n    } finally {\n      setIsExecutingAction(false);\n      isExecutingActionRef.current = false;\n      if (continueBattle && !cancelledRef.current) {\n        fetchActionForCurrentActor(autoProgressRef.current);\n      }\n    }\n  }, [appendToLog, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n    loggedTurnRef.current = 0;\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n    fetchActionForCurrentActor(true);\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n  const handleNextMove = useCallback(() => {\n    if (!pendingAction || autoProgress || winner || isFetchingAction || isExecutingAction || cancelledRef.current) {\n      return;\n    }\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress(prev => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (actionData && !winnerRef.current && !isFetchingActionRef.current && !isExecutingActionRef.current) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n  const playerOneState = (_playerStates$ = playerStates[0]) !== null && _playerStates$ !== void 0 ? _playerStates$ : null;\n  const playerTwoState = (_playerStates$2 = playerStates[1]) !== null && _playerStates$2 !== void 0 ? _playerStates$2 : null;\n  const nextMoveDisabled = !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${autoProgress ? \"\" : \"button-outline\"}`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"battle-layout\",\n    children: [playerOneState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerOneState,\n      actions: formatActions(playerOneState.player.wizard, playerOneState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"battle-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prompt-button button-outline battle-reset\",\n        type: \"button\",\n        onClick: onReset,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prompt-button battle-controls__primary\",\n          type: \"button\",\n          onClick: handleNextMove,\n          disabled: nextMoveDisabled,\n          children: nextMoveLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: autoProgressButtonClass,\n          type: \"button\",\n          onClick: toggleAutoProgress,\n          disabled: autoProgressDisabled,\n          children: `Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-log__content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Battle Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this), autoProgress && isFetchingAction && generatingWizardName && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__status\",\n          children: `Generating ${generatingWizardName}'s move...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), winner && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__winner\",\n          children: [\"Winner: \", winner.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 22\n        }, this), battleLog.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__empty\",\n          children: isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this) : battleLog.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-log__entry\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"api-result__pre\",\n            children: entry\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this), playerTwoState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerTwoState,\n      actions: formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"QyxO4dMg8hQ6D9ceYVQ9DDbSUyU=\");\n_c4 = Battle;\nexport default Battle;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatCircles\");\n$RefreshReg$(_c2, \"HorizontalStatBars\");\n$RefreshReg$(_c3, \"BattleColumn\");\n$RefreshReg$(_c4, \"Battle\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","GameState","combatSystemPrompt","jsxDEV","_jsxDEV","formatActions","wizard","currentMana","_wizard$all_actions","_wizard$all_actions2","availableMana","Number","isFinite","actions","all_actions","call","map","action","index","_action$display_card","_card$type","_card$mana_cost","_card$element","_card$description","card","display_card","manaCost","mana_cost","isAffordable","type","String","toUpperCase","manaCostLabel","emoji","rangeLabel","Array","isArray","range","length","min","max","trim","accuracyLabel","accuracy","Math","round","elementLabel","element","elementClass","toLowerCase","description","cardClassName","filter","Boolean","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","StatCircles","current","color","clampedCurrent","clampedMax","percent","style","width","backgroundColor","_c","HorizontalStatBars","state","stats","key","label","_state$player$wizard$","rawValue","player","_c2","BattleColumn","wizardState","current_health","max_health","current_mana","_c3","Battle","playerOneWizard","playerTwoWizard","onReset","apiBaseUrl","_s","_playerStates$","_playerStates$2","gameStateRef","controllerRef","cancelledRef","baseUrlRef","actingIndexRef","turnRef","loggedTurnRef","autoProgressRef","isFetchingActionRef","pendingActionRef","winnerRef","isExecutingActionRef","generatingWizardName","setGeneratingWizardName","playerStates","setPlayerStates","battleLog","setBattleLog","winner","setWinner","autoProgress","setAutoProgress","pendingAction","setPendingAction","isFetchingAction","setIsFetchingAction","isExecutingAction","setIsExecutingAction","shouldAutoResolve","setShouldAutoResolve","appendToLog","entry","prev","fetchActionForCurrentActor","fetchAction","autoExecute","_currentState$player_","_currentState$player_2","_actingState$player$w","_actingState$player","_actingState$player$w2","_actingState$player$w3","_actingState$current_","currentState","actingIndex","actingState","player_states","enemyState","validActions","affordable_actions","_currentState$increme","_currentState$get_win","increment_mana","winnerAfterSkip","get_winner","controller","AbortController","_ref","_selectedAction$name","_selectedAction$const","response","fetch","method","headers","body","JSON","stringify","system_prompt","user_prompt","battleSnapshot","signal","ok","errorText","text","Error","status","data","json","rawAction","parsedIndex","parseInt","adjustedIndex","selectedAction","turnData","turn","actingWizardName","actionName","constructor","error","executeAction","actionData","continueBattle","_currentState$perform","_currentState$get_win2","announcement","perform_action","winnerAfterAction","undefined","abort","initialize","handleNextMove","toggleAutoProgress","nextValue","playerOneState","playerTwoState","nextMoveDisabled","autoProgressDisabled","autoProgressButtonClass","nextMoveLabel","onClick","disabled","_c4","$RefreshReg$"],"sources":["/Users/michaelkeohane/Documents/Projects/LLM-Learnings/projects/week_2/wizard_prompt_battle/wizard-battle-client/src/battle.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport combatSystemPrompt from \"./prompts/prompts\";\n\nconst formatActions = (wizard, currentMana) => {\n  if (!wizard) {\n    return [];\n  }\n\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = wizard.all_actions?.() ?? [];\n\n  return actions.map((action, index) => {\n    const card = action.display_card?.();\n    if (!card) {\n      return null;\n    }\n\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n\n    const type = String(card.type ?? \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${card.mana_cost ?? \"?\"}`;\n    const emoji =\n      type === \"DAMAGE\"\n        ? \"💥\"\n        : type === \"BUFF\"\n        ? \"📈\"\n        : type === \"DEBUFF\"\n        ? \"📉\"\n        : type === \"HEAL\"\n        ? \"🍃\"\n        : type === \"DEFENSE\"\n        ? \"🛡️\"\n        : \"\";\n\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = card.element ?? null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = card.description ?? \"\";\n\n    const cardClassName = [\n      \"spell-card\",\n      type === \"HEAL\"\n        ? \"spell-card-heal\"\n        : type === \"DEFENSE\"\n        ? \"spell-card-defense\"\n        : \"spell-card-spell\",\n      !isAffordable ? \"spell-card--unavailable\" : null,\n    ]\n      .filter(Boolean)\n      .join(\" \");\n\n    return (\n      <div key={`${card.name}-${index}`} className={cardClassName}>\n        <div className=\"spell-card__row\">\n          <div className=\"spell-card__primary-left\">\n            {elementClass && <span className={elementClass}>{elementLabel}</span>}\n            <span className=\"spell-card__name\">{card.name}</span>\n          </div>\n          <div className=\"spell-card__primary-right\">\n            <span className=\"spell-card__meta spell-card__meta--range\">{rangeLabel}</span>\n            <span className=\"spell-card__meta\">{accuracyLabel}</span>\n            <span className=\"spell-card__meta\">{manaCostLabel}</span>\n          </div>\n        </div>\n        {description && (\n          <div className=\"spell-card__row spell-card__row--description\">\n            <span className=\"spell-card__description\">{description}</span>\n          </div>\n        )}\n      </div>\n    );\n  });\n};\n\nconst StatCircles = ({ current, max, color }) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n\n  return (\n    <div className=\"stat-horizontal\">\n      <div className=\"stat-horizontal__meter\">\n        <div\n          className=\"stat-horizontal__fill\"\n          style={{ width: `${percent * 100}%`, backgroundColor: color }}\n        >\n          <span className=\"stat-horizontal__value\">{`${clampedCurrent}/${clampedMax}`}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HorizontalStatBars = ({ state }) => {\n  const stats = [\n    { key: \"attack\", label: \"Attack\", color: \"#f87171\" },\n    { key: \"defense\", label: \"Defense\", color: \"#60a5fa\" },\n    { key: \"healing\", label: \"Healing\", color: \"#34d399\" },\n    { key: \"arcane\", label: \"Arcane\", color: \"#c084fc\" },\n  ];\n\n  return (\n    <div className=\"stat-bars\">\n      {stats.map(({ key, label, color }) => {\n        const rawValue = Math.min(1, Math.max(0, state.player.wizard[key] ?? 0));\n        const percent = Math.round(rawValue * 100);\n\n        return (\n          <div key={key} className=\"stat-row\">\n            <span className=\"stat-label\">{label}</span>\n            <div className=\"stat-meter\">\n              <div\n                className=\"stat-meter__fill\"\n                style={{ width: `${percent}%`, backgroundColor: color }}\n              >\n                <span className=\"stat-meter__value\">{percent}%</span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst BattleColumn = ({ actions, wizardState }) => (\n  <section className=\"battle-column\">\n    <header className=\"battle-column__header\">\n      <h2>{wizardState.player.wizard.name}</h2>\n    </header>\n    <div className=\"battle-column__content\">\n      <div className=\"battle-stats\">\n        <div className=\"battle-stats__resource-bars\">\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Health</span>\n            <StatCircles current={wizardState.current_health} max={wizardState.max_health} color=\"#b91c1c\" />\n          </div>\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Mana</span>\n            <StatCircles current={wizardState.current_mana} max={25} color=\"#a855f7\" />\n          </div>\n        </div>\n        <div className=\"battle-stats__bars\">\n          <h4 className=\"battle-section-title\">Stats</h4>\n          <HorizontalStatBars state={wizardState} />\n        </div>\n      </div>\n      <div className=\"battle-actions\">\n        <h4 className=\"battle-section-title battle-section-title--spells\">Spells</h4>\n        <div className=\"spell-cards\">{actions}</div>\n      </div>\n    </div>\n  </section>\n);\n\nconst Battle = ({ playerOneWizard, playerTwoWizard, onReset, apiBaseUrl }) => {\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl ?? \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n  const loggedTurnRef = useRef(0);\n\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl ?? \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n\n  const appendToLog = useCallback((entry) => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog((prev) => [entry, ...prev]);\n  }, []);\n\n  const fetchActionForCurrentActor = useCallback(\n    async function fetchAction(autoExecute = false) {\n      if (\n        cancelledRef.current ||\n        winnerRef.current ||\n        isFetchingActionRef.current ||\n        pendingActionRef.current\n      ) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      const actingIndex = actingIndexRef.current;\n      const actingState = currentState.player_states?.[actingIndex];\n      const enemyState = currentState.player_states?.[1 - actingIndex];\n\n      if (!actingState || !enemyState) {\n        appendToLog(\"Invalid game state\");\n        return;\n      }\n\n      if (actingIndex === 0 && turnRef.current > loggedTurnRef.current) {\n        appendToLog(`Turn ${turnRef.current}`);\n        loggedTurnRef.current = turnRef.current;\n      }\n\n      const validActions =\n        actingState.player?.wizard?.affordable_actions?.(actingState.current_mana ?? 0) ?? [];\n\n      if (!validActions.length) {\n        appendToLog(\"No valid actions available. Skipping turn.\");\n\n        currentState.increment_mana?.();\n        setPlayerStates([...currentState.player_states]);\n\n        actingIndexRef.current = 1 - actingIndex;\n        turnRef.current += 1;\n        if (actingIndexRef.current === 0 && turnRef.current > loggedTurnRef.current) {\n          appendToLog(`Turn ${turnRef.current}`);\n          loggedTurnRef.current = turnRef.current;\n        }\n\n        const winnerAfterSkip = currentState.get_winner?.();\n        if (winnerAfterSkip) {\n          winnerRef.current = winnerAfterSkip;\n          setWinner(winnerAfterSkip);\n          appendToLog(`${winnerAfterSkip.name} wins!`);\n          return;\n        }\n\n        return fetchAction(autoExecute);\n      }\n\n      setIsFetchingAction(true);\n      isFetchingActionRef.current = true;\n      setPendingAction(null);\n      pendingActionRef.current = null;\n      setGeneratingWizardName(actingState.player.wizard.name);\n\n      const controller = new AbortController();\n      controllerRef.current = controller;\n\n      try {\n        const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            system_prompt: combatSystemPrompt(actingState),\n            user_prompt: currentState.battleSnapshot(actingIndex),\n          }),\n          signal: controller.signal,\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n        }\n\n        const data = await response.json();\n        const rawAction = data?.action;\n        const parsedIndex =\n          typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n\n        if (!Number.isFinite(parsedIndex)) {\n          appendToLog(`Invalid action index returned: ${JSON.stringify(data)}`);\n          return;\n        }\n\n        const adjustedIndex = parsedIndex - 1;\n        if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n          appendToLog(`Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`);\n          return;\n        }\n\n        const selectedAction = validActions[adjustedIndex];\n        const turnData = {\n          actingIndex,\n          turn: turnRef.current,\n          actingWizardName: actingState.player.wizard.name,\n          selectedAction,\n          actionName:\n            selectedAction?.name ?? selectedAction?.constructor?.name ?? \"Action\",\n        };\n\n        pendingActionRef.current = turnData;\n        setPendingAction(turnData);\n        setShouldAutoResolve(autoExecute || autoProgressRef.current);\n      } catch (error) {\n        if (error?.name === \"AbortError\" || cancelledRef.current) {\n          return;\n        }\n\n        appendToLog(`Error during action generation: ${String(error)}`);\n      } finally {\n        if (controllerRef.current === controller) {\n          controllerRef.current = null;\n        }\n\n        isFetchingActionRef.current = false;\n        setIsFetchingAction(false);\n        setGeneratingWizardName(null);\n      }\n    },\n    [appendToLog, setPlayerStates, setWinner]\n  );\n\n  const executeAction = useCallback(\n    (actionData) => {\n      if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      setShouldAutoResolve(false);\n      setPendingAction(null);\n      pendingActionRef.current = null;\n\n      setIsExecutingAction(true);\n      isExecutingActionRef.current = true;\n\n      let continueBattle = true;\n\n      try {\n        const announcement =\n          currentState.perform_action(actionData.actingIndex, actionData.selectedAction) ?? \"\";\n\n        setPlayerStates([...currentState.player_states]);\n\n        appendToLog(`${announcement}\\n`);\n\n        const winnerAfterAction = currentState.get_winner?.();\n        if (winnerAfterAction) {\n          winnerRef.current = winnerAfterAction;\n          continueBattle = false;\n          setWinner(winnerAfterAction);\n          appendToLog(`${winnerAfterAction.name} wins!`);\n        } else {\n          actingIndexRef.current = 1 - actionData.actingIndex;\n          turnRef.current = actionData.turn + 1;\n        }\n      } catch (error) {\n        continueBattle = false;\n        appendToLog(`Action failed: ${String(error)}`);\n      } finally {\n        setIsExecutingAction(false);\n        isExecutingActionRef.current = false;\n\n        if (continueBattle && !cancelledRef.current) {\n          fetchActionForCurrentActor(autoProgressRef.current);\n        }\n      }\n    },\n    [appendToLog, fetchActionForCurrentActor]\n  );\n\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n    loggedTurnRef.current = 0;\n\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n\n    fetchActionForCurrentActor(true);\n\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n\n  const handleNextMove = useCallback(() => {\n    if (\n      !pendingAction ||\n      autoProgress ||\n      winner ||\n      isFetchingAction ||\n      isExecutingAction ||\n      cancelledRef.current\n    ) {\n      return;\n    }\n\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress((prev) => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (\n          actionData &&\n          !winnerRef.current &&\n          !isFetchingActionRef.current &&\n          !isExecutingActionRef.current\n        ) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n\n  const playerOneState = playerStates[0] ?? null;\n  const playerTwoState = playerStates[1] ?? null;\n\n  const nextMoveDisabled =\n    !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${\n    autoProgress ? \"\" : \"button-outline\"\n  }`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n\n  return (\n    <section className=\"battle-layout\">\n      {playerOneState && (\n        <BattleColumn\n          wizardState={playerOneState}\n          actions={formatActions(playerOneState.player.wizard, playerOneState.current_mana)}\n        />\n      )}\n\n      <section className=\"battle-log\">\n        <button className=\"prompt-button button-outline battle-reset\" type=\"button\" onClick={onReset}>\n          Start Over\n        </button>\n        <div className=\"battle-controls\">\n          <button\n            className=\"prompt-button battle-controls__primary\"\n            type=\"button\"\n            onClick={handleNextMove}\n            disabled={nextMoveDisabled}\n          >\n            {nextMoveLabel}\n          </button>\n          <button\n            className={autoProgressButtonClass}\n            type=\"button\"\n            onClick={toggleAutoProgress}\n            disabled={autoProgressDisabled}\n          >\n            {`Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`}\n          </button>\n        </div>\n        <div className=\"battle-log__content\">\n          <h2>Battle Log</h2>\n          {autoProgress && isFetchingAction && generatingWizardName && (\n            <p className=\"battle-log__status\">{`Generating ${generatingWizardName}'s move...`}</p>\n          )}\n          {winner && <p className=\"battle-log__winner\">Winner: {winner.name}</p>}\n          {battleLog.length === 0 ? (\n            <p className=\"battle-log__empty\">\n              {isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"}\n            </p>\n          ) : (\n            battleLog.map((entry, index) => (\n                <div key={index} className=\"battle-log__entry\">\n                <pre className=\"api-result__pre\">{entry}</pre>\n              </div>\n            ))\n          )}\n        </div>\n      </section>\n\n      {playerTwoState && (\n        <BattleColumn\n          wizardState={playerTwoState}\n          actions={formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Battle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}