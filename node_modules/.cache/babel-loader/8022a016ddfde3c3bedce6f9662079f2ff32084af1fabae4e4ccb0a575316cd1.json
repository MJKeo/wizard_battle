{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkeohane/Documents/Projects/wizard_battle/src/battle.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport { combatSystemPrompt, combatSystemPromptV2, combatUserPromptV2 } from \"./prompts/prompts\";\nimport BattleLogMessageType from \"./enums/battleLogMessageType\";\nimport ActionType from \"./enums/actionType\";\nimport SpellType from \"./enums/spellType\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formatActions = (wizard, currentMana) => {\n  var _wizard$all_actions, _wizard$all_actions2;\n  if (!wizard) {\n    return [];\n  }\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = (_wizard$all_actions = (_wizard$all_actions2 = wizard.all_actions) === null || _wizard$all_actions2 === void 0 ? void 0 : _wizard$all_actions2.call(wizard)) !== null && _wizard$all_actions !== void 0 ? _wizard$all_actions : [];\n  return actions.map((action, index) => {\n    var _action$display_card, _card$type, _card$mana_cost, _card$element, _card$description;\n    const card = (_action$display_card = action.display_card) === null || _action$display_card === void 0 ? void 0 : _action$display_card.call(action);\n    if (!card) {\n      return null;\n    }\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n    const type = String((_card$type = card.type) !== null && _card$type !== void 0 ? _card$type : \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${(_card$mana_cost = card.mana_cost) !== null && _card$mana_cost !== void 0 ? _card$mana_cost : \"?\"}`;\n    const emoji = type === \"DAMAGE\" ? \"💥\" : type === \"BUFF\" ? \"📈\" : type === \"DEBUFF\" ? \"📉\" : type === \"HEAL\" ? \"🍃\" : type === \"DEFENSE\" ? \"🛡️\" : \"\";\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = (_card$element = card.element) !== null && _card$element !== void 0 ? _card$element : null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = (_card$description = card.description) !== null && _card$description !== void 0 ? _card$description : \"\";\n    const cardClassName = [\"spell-card\", type === \"HEAL\" ? \"spell-card-heal\" : type === \"DEFENSE\" ? \"spell-card-defense\" : \"spell-card-spell\", !isAffordable ? \"spell-card--unavailable\" : null].filter(Boolean).join(\" \");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cardClassName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-left\",\n          children: [elementClass && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: elementClass,\n            children: elementLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__name\",\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spell-card__primary-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta spell-card__meta--range\",\n            children: rangeLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: accuracyLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spell-card__meta\",\n            children: manaCostLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), description && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-card__row spell-card__row--description\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"spell-card__description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, `${card.name}-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  });\n};\nconst formatActiveEffects = wizardState => {\n  var _wizardState$active_e;\n  const effects = (_wizardState$active_e = wizardState.active_effects) !== null && _wizardState$active_e !== void 0 ? _wizardState$active_e : [];\n  if (!effects.length) {\n    return [{\n      text: \"(none)\",\n      title: \"\"\n    }];\n  }\n  return effects.map(effect => {\n    var _ref, _effect$remaining_tur, _ref2, _effect$effect_type, _ref3, _ref4, _effect$source_name, _effect$value, _effect$name2;\n    const rounds = (_ref = (_effect$remaining_tur = effect.remaining_turns) !== null && _effect$remaining_tur !== void 0 ? _effect$remaining_tur : effect.rounds_remaining) !== null && _ref !== void 0 ? _ref : 0;\n    const type = String((_ref2 = (_effect$effect_type = effect.effect_type) !== null && _effect$effect_type !== void 0 ? _effect$effect_type : effect.type) !== null && _ref2 !== void 0 ? _ref2 : \"\").toUpperCase();\n    const sourceName = (_ref3 = (_ref4 = (_effect$source_name = effect.source_name) !== null && _effect$source_name !== void 0 ? _effect$source_name : effect.source) !== null && _ref4 !== void 0 ? _ref4 : effect.name) !== null && _ref3 !== void 0 ? _ref3 : \"Effect\";\n    if (type === \"DEFENSE\" || effect.is_defense && typeof effect.is_defense === \"boolean\") {\n      var _effect$name;\n      return {\n        text: `🛡️ ${(_effect$name = effect.name) !== null && _effect$name !== void 0 ? _effect$name : \"Unknown\"} (${rounds})`,\n        title: sourceName\n      };\n    }\n    const effectValue = Number((_effect$value = effect.value) !== null && _effect$value !== void 0 ? _effect$value : 0) || 0;\n    const percent = `${(Math.round(effectValue * 1000) / 10).toFixed(1)}%`;\n    if (type === \"BUFF\" || effect.is_buff) {\n      return {\n        text: `📈 ${percent} (${rounds})`,\n        title: sourceName\n      };\n    }\n    if (type === \"DEBUFF\" || effect.is_debuff) {\n      return {\n        text: `📉 ${percent} (${rounds})`,\n        title: sourceName\n      };\n    }\n    return {\n      text: `${(_effect$name2 = effect.name) !== null && _effect$name2 !== void 0 ? _effect$name2 : \"Effect\"} (${rounds})`,\n      title: sourceName\n    };\n  });\n};\nconst StatCircles = ({\n  current,\n  max,\n  color\n}) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-horizontal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat-horizontal__meter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-horizontal__fill\",\n        style: {\n          width: `${percent * 100}%`,\n          backgroundColor: color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-horizontal__value\",\n          children: `${clampedCurrent}/${clampedMax}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_c = StatCircles;\nconst HorizontalStatBars = ({\n  state\n}) => {\n  const stats = [{\n    key: \"attack\",\n    label: \"Attack\",\n    color: \"#f87171\"\n  }, {\n    key: \"defense\",\n    label: \"Defense\",\n    color: \"#60a5fa\"\n  }, {\n    key: \"healing\",\n    label: \"Healing\",\n    color: \"#34d399\"\n  }, {\n    key: \"arcane\",\n    label: \"Arcane\",\n    color: \"#c084fc\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-bars\",\n    children: stats.map(({\n      key,\n      label,\n      color\n    }) => {\n      var _state$player$wizard$;\n      const rawValue = Math.min(1, Math.max(0, (_state$player$wizard$ = state.player.wizard[key]) !== null && _state$player$wizard$ !== void 0 ? _state$player$wizard$ : 0));\n      const percent = Math.round(rawValue * 100);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-meter\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-meter__fill\",\n            style: {\n              width: `${percent}%`,\n              backgroundColor: color\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-meter__value\",\n              children: [percent, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_c2 = HorizontalStatBars;\nconst BattleColumn = ({\n  actions,\n  wizardState,\n  description\n}) => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: \"battle-column\",\n  children: [/*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"battle-column__header\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-wizard-name\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: wizardState.player.wizard.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), ((_wizardState$player, _wizardState$player$w) => {\n        const combatStyle = (_wizardState$player = wizardState.player) === null || _wizardState$player === void 0 ? void 0 : (_wizardState$player$w = _wizardState$player.wizard) === null || _wizardState$player$w === void 0 ? void 0 : _wizardState$player$w.combat_style;\n        const hasTooltipContent = Boolean(description || combatStyle);\n        if (!hasTooltipContent) {\n          return null;\n        }\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tooltip-trigger\",\n            children: \"?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tooltip-content\",\n            children: [combatStyle && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Combat Style\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: combatStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 21\n              }, this), description && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 37\n              }, this), description && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true), description && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Original Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-column__content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__resource-bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Health\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_health,\n            max: wizardState.max_health,\n            color: \"#b91c1c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-stats__resource\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"battle-stats__resource-label\",\n            children: \"Mana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StatCircles, {\n            current: wizardState.current_mana,\n            max: 25,\n            color: \"#a855f7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__effects\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Active Effects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-effects__list\",\n          children: formatActiveEffects(wizardState).map(({\n            text,\n            title\n          }, index) => {\n            var _wizardState$active_e2, _wizardState$active_e3;\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              title: title,\n              children: [text, index < ((_wizardState$active_e2 = (_wizardState$active_e3 = wizardState.active_effects) === null || _wizardState$active_e3 === void 0 ? void 0 : _wizardState$active_e3.length) !== null && _wizardState$active_e2 !== void 0 ? _wizardState$active_e2 : 0) - 1 ? \", \" : \"\"]\n            }, `${text}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats__bars\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"battle-section-title\",\n          children: \"Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalStatBars, {\n          state: wizardState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"battle-section-title battle-section-title--spells\",\n        children: \"Spells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-cards\",\n        children: actions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 184,\n  columnNumber: 3\n}, this);\n_c3 = BattleColumn;\nconst Battle = ({\n  playerOneWizard,\n  playerTwoWizard,\n  onReset,\n  apiBaseUrl,\n  descriptions\n}) => {\n  _s();\n  var _playerStates$, _playerStates$2, _playerOneState$playe, _playerOneState$playe2, _playerOneState$playe3, _playerTwoState$playe, _playerTwoState$playe2, _playerTwoState$playe3;\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n  const descriptionsRef = useRef({\n    playerOne: \"\",\n    playerTwo: \"\"\n  });\n  useEffect(() => {\n    var _ref5, _descriptions$playerO, _ref6, _descriptions$playerT;\n    descriptionsRef.current = {\n      playerOne: (_ref5 = (_descriptions$playerO = descriptions === null || descriptions === void 0 ? void 0 : descriptions.playerOne) !== null && _descriptions$playerO !== void 0 ? _descriptions$playerO : descriptionsRef.current.playerOne) !== null && _ref5 !== void 0 ? _ref5 : \"\",\n      playerTwo: (_ref6 = (_descriptions$playerT = descriptions === null || descriptions === void 0 ? void 0 : descriptions.playerTwo) !== null && _descriptions$playerT !== void 0 ? _descriptions$playerT : descriptionsRef.current.playerTwo) !== null && _ref6 !== void 0 ? _ref6 : \"\"\n    };\n  }, [descriptions]);\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl !== null && apiBaseUrl !== void 0 ? apiBaseUrl : \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n  const appendToLog = useCallback(entry => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog(prev => [entry, ...prev]);\n  }, []);\n  const fetchActionForCurrentActor = useCallback(async function fetchAction(autoExecute = false) {\n    var _currentState$player_, _currentState$player_2, _currentState$afforda;\n    if (cancelledRef.current || winnerRef.current || isFetchingActionRef.current || pendingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    const actingIndex = actingIndexRef.current;\n    const actingState = (_currentState$player_ = currentState.player_states) === null || _currentState$player_ === void 0 ? void 0 : _currentState$player_[actingIndex];\n    const enemyState = (_currentState$player_2 = currentState.player_states) === null || _currentState$player_2 === void 0 ? void 0 : _currentState$player_2[1 - actingIndex];\n    if (!actingState || !enemyState) {\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: \"Invalid game state\"\n      });\n      return;\n    }\n    const validActions = (_currentState$afforda = currentState.affordable_actions(actingIndex)) !== null && _currentState$afforda !== void 0 ? _currentState$afforda : [];\n    if (!validActions.length) {\n      var _currentState$increme, _currentState$get_win;\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: \"No valid actions available. Skipping turn.\"\n      });\n      const manaBefore = actingIndex === 1 ? currentState.player_states.map(state => state.current_mana) : null;\n      (_currentState$increme = currentState.increment_mana) === null || _currentState$increme === void 0 ? void 0 : _currentState$increme.call(currentState);\n      const updatedStates = [...currentState.player_states];\n      setPlayerStates(updatedStates);\n      if (actingIndex === 1 && manaBefore) {\n        const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n        appendToLog({\n          type: BattleLogMessageType.TURN_END,\n          message: `End turn ${turnRef.current}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`\n        });\n      }\n      actingIndexRef.current = 1 - actingIndex;\n      if (actingIndex === 1) {\n        turnRef.current += 1;\n      }\n      const winnerAfterSkip = (_currentState$get_win = currentState.get_winner) === null || _currentState$get_win === void 0 ? void 0 : _currentState$get_win.call(currentState);\n      if (winnerAfterSkip) {\n        winnerRef.current = winnerAfterSkip;\n        setWinner(winnerAfterSkip);\n        appendToLog({\n          type: BattleLogMessageType.WINNER,\n          message: `${winnerAfterSkip.name} wins!`\n        });\n        return;\n      }\n      return fetchAction(autoExecute);\n    }\n    setIsFetchingAction(true);\n    isFetchingActionRef.current = true;\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setGeneratingWizardName(actingState.player.wizard.name);\n    const controller = new AbortController();\n    controllerRef.current = controller;\n    try {\n      var _ref7, _selectedAction$name, _selectedAction$const;\n      const battleContext = currentState.compact_battle_context(actingIndex);\n      const system_prompt = combatSystemPromptV2(actingState.player.wizard);\n      const user_prompt = combatUserPromptV2(actingState.player.wizard, battleContext['actor_info'], battleContext['enemy_info']);\n      console.log(user_prompt);\n      const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          system_prompt: system_prompt,\n          user_prompt: user_prompt\n        }),\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(data['justification']);\n      const rawAction = data === null || data === void 0 ? void 0 : data.action_index;\n      const parsedIndex = typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n      if (!Number.isFinite(parsedIndex)) {\n        appendToLog({\n          type: BattleLogMessageType.ERROR,\n          message: `Invalid action index returned: ${JSON.stringify(data)}`\n        });\n        return;\n      }\n      const adjustedIndex = parsedIndex - 1;\n      if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n        appendToLog({\n          type: BattleLogMessageType.ERROR,\n          message: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions`\n        });\n        return;\n      }\n      const selectedAction = validActions[adjustedIndex];\n      const turnData = {\n        actingIndex,\n        turn: turnRef.current,\n        actingWizardName: actingState.player.wizard.name,\n        selectedAction,\n        actionName: (_ref7 = (_selectedAction$name = selectedAction === null || selectedAction === void 0 ? void 0 : selectedAction.name) !== null && _selectedAction$name !== void 0 ? _selectedAction$name : selectedAction === null || selectedAction === void 0 ? void 0 : (_selectedAction$const = selectedAction.constructor) === null || _selectedAction$const === void 0 ? void 0 : _selectedAction$const.name) !== null && _ref7 !== void 0 ? _ref7 : \"Action\"\n      };\n      pendingActionRef.current = turnData;\n      setPendingAction(turnData);\n      setShouldAutoResolve(autoExecute || autoProgressRef.current);\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\" || cancelledRef.current) {\n        return;\n      }\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: `Error during action generation: ${String(error)}`\n      });\n    } finally {\n      if (controllerRef.current === controller) {\n        controllerRef.current = null;\n      }\n      isFetchingActionRef.current = false;\n      setIsFetchingAction(false);\n      setGeneratingWizardName(null);\n    }\n  }, [appendToLog, setPlayerStates, setWinner]);\n  const executeAction = useCallback(actionData => {\n    if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    const currentState = gameStateRef.current;\n    if (!currentState) {\n      return;\n    }\n    setShouldAutoResolve(false);\n    setPendingAction(null);\n    pendingActionRef.current = null;\n    setIsExecutingAction(true);\n    isExecutingActionRef.current = true;\n    let continueBattle = true;\n    try {\n      var _currentState$perform, _currentState$get_win2;\n      if (actionData.actingIndex === 0) {\n        appendToLog({\n          type: BattleLogMessageType.TURN_START,\n          message: `Turn ${actionData.turn}`\n        });\n      }\n      const announcement = (_currentState$perform = currentState.perform_action(actionData.actingIndex, actionData.selectedAction)) !== null && _currentState$perform !== void 0 ? _currentState$perform : \"\";\n      setPlayerStates([...currentState.player_states]);\n      var action_emoji = \"🪄\";\n      switch (actionData.selectedAction.action_type.name) {\n        case \"HEAL\":\n          action_emoji = \"🍃\";\n          break;\n        case \"DEFEND\":\n          action_emoji = \"🛡️\";\n          break;\n        case \"CAST_SPELL\":\n          switch (actionData.selectedAction.spell_type) {\n            case SpellType.DAMAGE:\n              action_emoji = \"💥\";\n              break;\n            case SpellType.BUFF:\n              action_emoji = \"📈\";\n              break;\n            case SpellType.DEBUFF:\n              action_emoji = \"📉\";\n              break;\n          }\n          break;\n        case \"PASS\":\n          action_emoji = \"✋\";\n          break;\n      }\n      appendToLog({\n        type: BattleLogMessageType.PLAYER_ACTION,\n        message: `${action_emoji} ${announcement}\\n`\n      });\n      const winnerAfterAction = (_currentState$get_win2 = currentState.get_winner) === null || _currentState$get_win2 === void 0 ? void 0 : _currentState$get_win2.call(currentState);\n      if (winnerAfterAction) {\n        winnerRef.current = winnerAfterAction;\n        continueBattle = false;\n        setWinner(winnerAfterAction);\n        appendToLog({\n          type: BattleLogMessageType.WINNER,\n          message: `${winnerAfterAction.name} wins!`\n        });\n      } else {\n        actingIndexRef.current = 1 - actionData.actingIndex;\n        if (actingIndexRef.current === 0) {\n          var _currentState$increme2;\n          const manaBefore = currentState.player_states.map(state => state.current_mana);\n          (_currentState$increme2 = currentState.increment_mana) === null || _currentState$increme2 === void 0 ? void 0 : _currentState$increme2.call(currentState);\n          const updatedStates = [...currentState.player_states];\n          setPlayerStates(updatedStates);\n          const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n          appendToLog({\n            type: BattleLogMessageType.TURN_END,\n            message: `End turn ${actionData.turn}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`\n          });\n          turnRef.current = actionData.turn + 1;\n        }\n      }\n    } catch (error) {\n      continueBattle = false;\n      appendToLog({\n        type: BattleLogMessageType.ERROR,\n        message: `Action failed: ${String(error)}`\n      });\n    } finally {\n      setIsExecutingAction(false);\n      isExecutingActionRef.current = false;\n      if (continueBattle && !cancelledRef.current) {\n        fetchActionForCurrentActor(autoProgressRef.current);\n      }\n    }\n  }, [appendToLog, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n    fetchActionForCurrentActor(true);\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n  const handleNextMove = useCallback(() => {\n    if (!pendingAction || autoProgress || winner || isFetchingAction || isExecutingAction || cancelledRef.current) {\n      return;\n    }\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress(prev => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (actionData && !winnerRef.current && !isFetchingActionRef.current && !isExecutingActionRef.current) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n  const playerOneState = (_playerStates$ = playerStates[0]) !== null && _playerStates$ !== void 0 ? _playerStates$ : null;\n  const playerTwoState = (_playerStates$2 = playerStates[1]) !== null && _playerStates$2 !== void 0 ? _playerStates$2 : null;\n  const playerOneDescription = (_playerOneState$playe = playerOneState === null || playerOneState === void 0 ? void 0 : (_playerOneState$playe2 = playerOneState.player) === null || _playerOneState$playe2 === void 0 ? void 0 : (_playerOneState$playe3 = _playerOneState$playe2.wizard) === null || _playerOneState$playe3 === void 0 ? void 0 : _playerOneState$playe3.original_description) !== null && _playerOneState$playe !== void 0 ? _playerOneState$playe : descriptionsRef.current.playerOne;\n  const playerTwoDescription = (_playerTwoState$playe = playerTwoState === null || playerTwoState === void 0 ? void 0 : (_playerTwoState$playe2 = playerTwoState.player) === null || _playerTwoState$playe2 === void 0 ? void 0 : (_playerTwoState$playe3 = _playerTwoState$playe2.wizard) === null || _playerTwoState$playe3 === void 0 ? void 0 : _playerTwoState$playe3.original_description) !== null && _playerTwoState$playe !== void 0 ? _playerTwoState$playe : descriptionsRef.current.playerTwo;\n  const nextMoveDisabled = !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${autoProgress ? \"\" : \"button-outline\"}`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"battle-layout\",\n    children: [playerOneState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerOneState,\n      actions: formatActions(playerOneState.player.wizard, playerOneState.current_mana),\n      description: playerOneDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"battle-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prompt-button button-outline battle-reset\",\n        type: \"button\",\n        onClick: onReset,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prompt-button battle-controls__primary\",\n          type: \"button\",\n          onClick: handleNextMove,\n          disabled: nextMoveDisabled,\n          children: nextMoveLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: autoProgressButtonClass,\n          type: \"button\",\n          onClick: toggleAutoProgress,\n          disabled: autoProgressDisabled,\n          children: `Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-log__content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Battle Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this), autoProgress && isFetchingAction && generatingWizardName && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__status\",\n          children: `Generating ${generatingWizardName}'s move...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this), battleLog.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"battle-log__empty\",\n          children: isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 13\n        }, this) : battleLog.map((entry, index) => {\n          var entryClass = \"battle-log__entry\";\n          switch (entry.type) {\n            case BattleLogMessageType.PLAYER_ACTION:\n              entryClass = \"battle-log__entry\";\n              break;\n            case BattleLogMessageType.WINNER:\n              entryClass = \"battle-log__entry--WINNER\";\n              break;\n            case BattleLogMessageType.TURN_START:\n              entryClass = \"battle-log__entry--turn-start\";\n              break;\n            case BattleLogMessageType.TURN_END:\n              entryClass = \"battle-log__entry--turn-end\";\n              break;\n            case BattleLogMessageType.ERROR:\n              entryClass = \"battle-log__entry--error\";\n              break;\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: entryClass,\n              children: entry.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), playerTwoState && /*#__PURE__*/_jsxDEV(BattleColumn, {\n      wizardState: playerTwoState,\n      actions: formatActions(playerTwoState.player.wizard, playerTwoState.current_mana),\n      description: playerTwoDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 676,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"jNAu9b0sXYqVJqJSL+JNvcStruo=\");\n_c4 = Battle;\nexport default Battle;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatCircles\");\n$RefreshReg$(_c2, \"HorizontalStatBars\");\n$RefreshReg$(_c3, \"BattleColumn\");\n$RefreshReg$(_c4, \"Battle\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","GameState","combatSystemPrompt","combatSystemPromptV2","combatUserPromptV2","BattleLogMessageType","ActionType","SpellType","jsxDEV","_jsxDEV","Fragment","_Fragment","formatActions","wizard","currentMana","_wizard$all_actions","_wizard$all_actions2","availableMana","Number","isFinite","actions","all_actions","call","map","action","index","_action$display_card","_card$type","_card$mana_cost","_card$element","_card$description","card","display_card","manaCost","mana_cost","isAffordable","type","String","toUpperCase","manaCostLabel","emoji","rangeLabel","Array","isArray","range","length","min","max","trim","accuracyLabel","accuracy","Math","round","elementLabel","element","elementClass","toLowerCase","description","cardClassName","filter","Boolean","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","formatActiveEffects","wizardState","_wizardState$active_e","effects","active_effects","text","title","effect","_ref","_effect$remaining_tur","_ref2","_effect$effect_type","_ref3","_ref4","_effect$source_name","_effect$value","_effect$name2","rounds","remaining_turns","rounds_remaining","effect_type","sourceName","source_name","source","is_defense","_effect$name","effectValue","value","percent","toFixed","is_buff","is_debuff","StatCircles","current","color","clampedCurrent","clampedMax","style","width","backgroundColor","_c","HorizontalStatBars","state","stats","key","label","_state$player$wizard$","rawValue","player","_c2","BattleColumn","_wizardState$player","_wizardState$player$w","combatStyle","combat_style","hasTooltipContent","current_health","max_health","current_mana","_wizardState$active_e2","_wizardState$active_e3","_c3","Battle","playerOneWizard","playerTwoWizard","onReset","apiBaseUrl","descriptions","_s","_playerStates$","_playerStates$2","_playerOneState$playe","_playerOneState$playe2","_playerOneState$playe3","_playerTwoState$playe","_playerTwoState$playe2","_playerTwoState$playe3","gameStateRef","controllerRef","cancelledRef","baseUrlRef","actingIndexRef","turnRef","autoProgressRef","isFetchingActionRef","pendingActionRef","winnerRef","isExecutingActionRef","generatingWizardName","setGeneratingWizardName","descriptionsRef","playerOne","playerTwo","_ref5","_descriptions$playerO","_ref6","_descriptions$playerT","playerStates","setPlayerStates","battleLog","setBattleLog","winner","setWinner","autoProgress","setAutoProgress","pendingAction","setPendingAction","isFetchingAction","setIsFetchingAction","isExecutingAction","setIsExecutingAction","shouldAutoResolve","setShouldAutoResolve","appendToLog","entry","prev","fetchActionForCurrentActor","fetchAction","autoExecute","_currentState$player_","_currentState$player_2","_currentState$afforda","currentState","actingIndex","actingState","player_states","enemyState","ERROR","message","validActions","affordable_actions","_currentState$increme","_currentState$get_win","manaBefore","increment_mana","updatedStates","manaGains","idx","TURN_END","winnerAfterSkip","get_winner","WINNER","controller","AbortController","_ref7","_selectedAction$name","_selectedAction$const","battleContext","compact_battle_context","system_prompt","user_prompt","console","log","response","fetch","method","headers","body","JSON","stringify","signal","ok","errorText","Error","status","data","json","rawAction","action_index","parsedIndex","parseInt","adjustedIndex","selectedAction","turnData","turn","actingWizardName","actionName","constructor","error","executeAction","actionData","continueBattle","_currentState$perform","_currentState$get_win2","TURN_START","announcement","perform_action","action_emoji","action_type","spell_type","DAMAGE","BUFF","DEBUFF","PLAYER_ACTION","winnerAfterAction","_currentState$increme2","undefined","abort","initialize","handleNextMove","toggleAutoProgress","nextValue","playerOneState","playerTwoState","playerOneDescription","original_description","playerTwoDescription","nextMoveDisabled","autoProgressDisabled","autoProgressButtonClass","nextMoveLabel","onClick","disabled","entryClass","_c4","$RefreshReg$"],"sources":["/Users/michaelkeohane/Documents/Projects/wizard_battle/src/battle.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameState } from \"./classes/gameState\";\nimport { combatSystemPrompt, combatSystemPromptV2, combatUserPromptV2 } from \"./prompts/prompts\";\nimport BattleLogMessageType from \"./enums/battleLogMessageType\";\nimport ActionType from \"./enums/actionType\";\nimport SpellType from \"./enums/spellType\";\n\nconst formatActions = (wizard, currentMana) => {\n  if (!wizard) {\n    return [];\n  }\n\n  const availableMana = Number.isFinite(currentMana) ? currentMana : 0;\n  const actions = wizard.all_actions?.() ?? [];\n\n  return actions.map((action, index) => {\n    const card = action.display_card?.();\n    if (!card) {\n      return null;\n    }\n\n    const manaCost = typeof action.mana_cost === \"function\" ? action.mana_cost() : card.mana_cost;\n    const isAffordable = Number.isFinite(manaCost) ? manaCost <= availableMana : true;\n\n    const type = String(card.type ?? \"\").toUpperCase();\n    const manaCostLabel = `🔮 ${card.mana_cost ?? \"?\"}`;\n    const emoji =\n      type === \"DAMAGE\"\n        ? \"💥\"\n        : type === \"BUFF\"\n        ? \"📈\"\n        : type === \"DEBUFF\"\n        ? \"📉\"\n        : type === \"HEAL\"\n        ? \"🍃\"\n        : type === \"DEFENSE\"\n        ? \"🛡️\"\n        : \"\";\n\n    const rangeLabel = (() => {\n      if (Array.isArray(card.range) && card.range.length === 2) {\n        const [min, max] = card.range;\n        return `${emoji} ${min}-${max}`.trim();\n      }\n      if (typeof card.range === \"string\") {\n        return `${emoji} ${card.range}`.trim();\n      }\n      return emoji;\n    })();\n\n    const accuracyLabel = typeof card.accuracy === \"number\" ? `🎯 ${Math.round(card.accuracy * 100)}%` : \"🎯 ?\";\n    const elementLabel = card.element ?? null;\n    const elementClass = elementLabel ? `element-pill element-${String(elementLabel).toLowerCase()}` : null;\n    const description = card.description ?? \"\";\n\n    const cardClassName = [\n      \"spell-card\",\n      type === \"HEAL\"\n        ? \"spell-card-heal\"\n        : type === \"DEFENSE\"\n        ? \"spell-card-defense\"\n        : \"spell-card-spell\",\n      !isAffordable ? \"spell-card--unavailable\" : null,\n    ]\n      .filter(Boolean)\n      .join(\" \");\n\n    return (\n      <div key={`${card.name}-${index}`} className={cardClassName}>\n        <div className=\"spell-card__row\">\n          <div className=\"spell-card__primary-left\">\n            {elementClass && <span className={elementClass}>{elementLabel}</span>}\n            <span className=\"spell-card__name\">{card.name}</span>\n          </div>\n          <div className=\"spell-card__primary-right\">\n            <span className=\"spell-card__meta spell-card__meta--range\">{rangeLabel}</span>\n            <span className=\"spell-card__meta\">{accuracyLabel}</span>\n            <span className=\"spell-card__meta\">{manaCostLabel}</span>\n          </div>\n        </div>\n        {description && (\n          <div className=\"spell-card__row spell-card__row--description\">\n            <span className=\"spell-card__description\">{description}</span>\n          </div>\n        )}\n      </div>\n    );\n  });\n};\n\nconst formatActiveEffects = (wizardState) => {\n  const effects = wizardState.active_effects ?? [];\n  if (!effects.length) {\n    return [{ text: \"(none)\", title: \"\" }];\n  }\n\n  return effects.map((effect) => {\n    const rounds = effect.remaining_turns ?? effect.rounds_remaining ?? 0;\n    const type = String(effect.effect_type ?? effect.type ?? \"\").toUpperCase();\n    const sourceName = effect.source_name ?? effect.source ?? effect.name ?? \"Effect\";\n    if (type === \"DEFENSE\" || (effect.is_defense && typeof effect.is_defense === \"boolean\")) {\n      return {\n        text: `🛡️ ${effect.name ?? \"Unknown\"} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    const effectValue = Number(effect.value ?? 0) || 0;\n    const percent = `${(Math.round(effectValue * 1000) / 10).toFixed(1)}%`;\n\n    if (type === \"BUFF\" || effect.is_buff) {\n      return {\n        text: `📈 ${percent} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    if (type === \"DEBUFF\" || effect.is_debuff) {\n      return {\n        text: `📉 ${percent} (${rounds})`,\n        title: sourceName,\n      };\n    }\n\n    return {\n      text: `${effect.name ?? \"Effect\"} (${rounds})`,\n      title: sourceName,\n    };\n  });\n};\n\nconst StatCircles = ({ current, max, color }) => {\n  const clampedCurrent = Math.max(0, current);\n  const clampedMax = Math.max(1, max);\n  const percent = Math.max(0, Math.min(1, clampedCurrent / clampedMax));\n\n  return (\n    <div className=\"stat-horizontal\">\n      <div className=\"stat-horizontal__meter\">\n        <div\n          className=\"stat-horizontal__fill\"\n          style={{ width: `${percent * 100}%`, backgroundColor: color }}\n        >\n          <span className=\"stat-horizontal__value\">{`${clampedCurrent}/${clampedMax}`}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HorizontalStatBars = ({ state }) => {\n  const stats = [\n    { key: \"attack\", label: \"Attack\", color: \"#f87171\" },\n    { key: \"defense\", label: \"Defense\", color: \"#60a5fa\" },\n    { key: \"healing\", label: \"Healing\", color: \"#34d399\" },\n    { key: \"arcane\", label: \"Arcane\", color: \"#c084fc\" },\n  ];\n\n  return (\n    <div className=\"stat-bars\">\n      {stats.map(({ key, label, color }) => {\n        const rawValue = Math.min(1, Math.max(0, state.player.wizard[key] ?? 0));\n        const percent = Math.round(rawValue * 100);\n\n        return (\n          <div key={key} className=\"stat-row\">\n            <span className=\"stat-label\">{label}</span>\n            <div className=\"stat-meter\">\n              <div\n                className=\"stat-meter__fill\"\n                style={{ width: `${percent}%`, backgroundColor: color }}\n              >\n                <span className=\"stat-meter__value\">{percent}%</span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst BattleColumn = ({ actions, wizardState, description }) => (\n  <section className=\"battle-column\">\n    <header className=\"battle-column__header\">\n      <div className=\"battle-wizard-name\">\n        <h2>{wizardState.player.wizard.name}</h2>\n        {(() => {\n          const combatStyle = wizardState.player?.wizard?.combat_style;\n          const hasTooltipContent = Boolean(description || combatStyle);\n          if (!hasTooltipContent) {\n            return null;\n          }\n          return (\n            <>\n              <span className=\"tooltip-trigger\">?</span>\n              <div className=\"tooltip-content\">\n                {combatStyle && (\n                  <>\n                    <strong>Combat Style</strong>\n                    <br />\n                    <span>{combatStyle}</span>\n                    {description && <br />}\n                    {description && <br />}\n                  </>\n                )}\n                {description && (\n                  <>\n                    <strong>Original Description</strong>\n                    <br />\n                    <span>{description}</span>\n                  </>\n                )}\n              </div>\n            </>\n          );\n        })()}\n      </div>\n    </header>\n    <div className=\"battle-column__content\">\n      <div className=\"battle-stats\">\n        <div className=\"battle-stats__resource-bars\">\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Health</span>\n            <StatCircles current={wizardState.current_health} max={wizardState.max_health} color=\"#b91c1c\" />\n          </div>\n          <div className=\"battle-stats__resource\">\n            <span className=\"battle-stats__resource-label\">Mana</span>\n            <StatCircles current={wizardState.current_mana} max={25} color=\"#a855f7\" />\n          </div>\n        </div>\n        <div className=\"battle-stats__effects\">\n          <h4 className=\"battle-section-title\">Active Effects</h4>\n          <p className=\"battle-effects__list\">\n            {formatActiveEffects(wizardState)\n              .map(({ text, title }, index) => (\n                <span key={`${text}-${index}`} title={title}>\n                  {text}\n                  {index < (wizardState.active_effects?.length ?? 0) - 1 ? \", \" : \"\"}\n                </span>\n              ))}\n          </p>\n        </div>\n        <div className=\"battle-stats__bars\">\n          <h4 className=\"battle-section-title\">Stats</h4>\n          <HorizontalStatBars state={wizardState} />\n        </div>\n      </div>\n      <div className=\"battle-actions\">\n        <h4 className=\"battle-section-title battle-section-title--spells\">Spells</h4>\n        <div className=\"spell-cards\">{actions}</div>\n      </div>\n    </div>\n  </section>\n);\n\nconst Battle = ({ playerOneWizard, playerTwoWizard, onReset, apiBaseUrl, descriptions }) => {\n  const gameStateRef = useRef(null);\n  const controllerRef = useRef(null);\n  const cancelledRef = useRef(false);\n  const baseUrlRef = useRef(apiBaseUrl ?? \"http://localhost:3167\");\n  const actingIndexRef = useRef(0);\n  const turnRef = useRef(1);\n\n  const autoProgressRef = useRef(false);\n  const isFetchingActionRef = useRef(false);\n  const pendingActionRef = useRef(null);\n  const winnerRef = useRef(null);\n  const isExecutingActionRef = useRef(false);\n  const [generatingWizardName, setGeneratingWizardName] = useState(null);\n  const descriptionsRef = useRef({ playerOne: \"\", playerTwo: \"\" });\n\n  useEffect(() => {\n    descriptionsRef.current = {\n      playerOne: descriptions?.playerOne ?? descriptionsRef.current.playerOne ?? \"\",\n      playerTwo: descriptions?.playerTwo ?? descriptionsRef.current.playerTwo ?? \"\",\n    };\n  }, [descriptions]);\n\n  const [playerStates, setPlayerStates] = useState([]);\n  const [battleLog, setBattleLog] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [isFetchingAction, setIsFetchingAction] = useState(false);\n  const [isExecutingAction, setIsExecutingAction] = useState(false);\n  const [shouldAutoResolve, setShouldAutoResolve] = useState(false);\n\n  useEffect(() => {\n    baseUrlRef.current = apiBaseUrl ?? \"http://localhost:3167\";\n  }, [apiBaseUrl]);\n\n  useEffect(() => {\n    autoProgressRef.current = autoProgress;\n  }, [autoProgress]);\n\n  useEffect(() => {\n    pendingActionRef.current = pendingAction;\n  }, [pendingAction]);\n\n  useEffect(() => {\n    isFetchingActionRef.current = isFetchingAction;\n  }, [isFetchingAction]);\n\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n\n  useEffect(() => {\n    isExecutingActionRef.current = isExecutingAction;\n  }, [isExecutingAction]);\n\n  const appendToLog = useCallback((entry) => {\n    if (cancelledRef.current) {\n      return;\n    }\n    setBattleLog((prev) => [entry, ...prev]);\n  }, []);\n\n  const fetchActionForCurrentActor = useCallback(\n    async function fetchAction(autoExecute = false) {\n      if (\n        cancelledRef.current ||\n        winnerRef.current ||\n        isFetchingActionRef.current ||\n        pendingActionRef.current\n      ) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      const actingIndex = actingIndexRef.current;\n      const actingState = currentState.player_states?.[actingIndex];\n      const enemyState = currentState.player_states?.[1 - actingIndex];\n\n      if (!actingState || !enemyState) {\n        appendToLog({ type: BattleLogMessageType.ERROR, message: \"Invalid game state\" });\n        return;\n      }\n\n      const validActions = currentState.affordable_actions(actingIndex) ?? [];\n\n      if (!validActions.length) {\n        appendToLog({ type: BattleLogMessageType.ERROR, message: \"No valid actions available. Skipping turn.\" });\n\n        const manaBefore = actingIndex === 1\n          ? currentState.player_states.map((state) => state.current_mana)\n          : null;\n        currentState.increment_mana?.();\n        const updatedStates = [...currentState.player_states];\n        setPlayerStates(updatedStates);\n\n        if (actingIndex === 1 && manaBefore) {\n          const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n          appendToLog({\n            type: BattleLogMessageType.TURN_END,\n            message: `End turn ${turnRef.current}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`,\n          });\n        }\n\n        actingIndexRef.current = 1 - actingIndex;\n        if (actingIndex === 1) {\n          turnRef.current += 1;\n        }\n\n        const winnerAfterSkip = currentState.get_winner?.();\n        if (winnerAfterSkip) {\n          winnerRef.current = winnerAfterSkip;\n          setWinner(winnerAfterSkip);\n          appendToLog({ type: BattleLogMessageType.WINNER, message: `${winnerAfterSkip.name} wins!` });\n          return;\n        }\n\n        return fetchAction(autoExecute);\n      }\n\n      setIsFetchingAction(true);\n      isFetchingActionRef.current = true;\n      setPendingAction(null);\n      pendingActionRef.current = null;\n      setGeneratingWizardName(actingState.player.wizard.name);\n\n      const controller = new AbortController();\n      controllerRef.current = controller;\n\n      try {\n        const battleContext = currentState.compact_battle_context(actingIndex);\n        const system_prompt = combatSystemPromptV2(actingState.player.wizard)\n        const user_prompt = combatUserPromptV2(actingState.player.wizard, battleContext['actor_info'], battleContext['enemy_info'])\n        console.log(user_prompt)\n        const response = await fetch(`${baseUrlRef.current}/generate_action`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            system_prompt: system_prompt,\n            user_prompt: user_prompt,\n          }),\n          signal: controller.signal,\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to generate action (${response.status}): ${errorText}`);\n        }\n\n        const data = await response.json();\n        console.log(data['justification'])\n        const rawAction = data?.action_index;\n        const parsedIndex =\n          typeof rawAction === \"number\" ? rawAction : Number.parseInt(rawAction, 10);\n\n        if (!Number.isFinite(parsedIndex)) {\n          appendToLog({ type: BattleLogMessageType.ERROR, message:`Invalid action index returned: ${JSON.stringify(data)}`});\n          return;\n        }\n\n        const adjustedIndex = parsedIndex - 1;\n        if (adjustedIndex < 0 || adjustedIndex >= validActions.length) {\n          appendToLog({ type: BattleLogMessageType.ERROR, message: `Action index ${parsedIndex} is out of bounds for ${validActions.length} actions` });\n          return;\n        }\n\n        const selectedAction = validActions[adjustedIndex];\n        const turnData = {\n          actingIndex,\n          turn: turnRef.current,\n          actingWizardName: actingState.player.wizard.name,\n          selectedAction,\n          actionName:\n            selectedAction?.name ?? selectedAction?.constructor?.name ?? \"Action\",\n        };\n\n        pendingActionRef.current = turnData;\n        setPendingAction(turnData);\n        setShouldAutoResolve(autoExecute || autoProgressRef.current);\n      } catch (error) {\n        if (error?.name === \"AbortError\" || cancelledRef.current) {\n          return;\n        }\n\n        appendToLog({ type: BattleLogMessageType.ERROR, message: `Error during action generation: ${String(error)}` });\n      } finally {\n        if (controllerRef.current === controller) {\n          controllerRef.current = null;\n        }\n\n        isFetchingActionRef.current = false;\n        setIsFetchingAction(false);\n        setGeneratingWizardName(null);\n      }\n    },\n    [appendToLog, setPlayerStates, setWinner]\n  );\n\n  const executeAction = useCallback(\n    (actionData) => {\n      if (!actionData || cancelledRef.current || winnerRef.current || isExecutingActionRef.current) {\n        return;\n      }\n\n      const currentState = gameStateRef.current;\n      if (!currentState) {\n        return;\n      }\n\n      setShouldAutoResolve(false);\n      setPendingAction(null);\n      pendingActionRef.current = null;\n\n      setIsExecutingAction(true);\n      isExecutingActionRef.current = true;\n\n      let continueBattle = true;\n\n      try {\n        if (actionData.actingIndex === 0) {\n          appendToLog({ type: BattleLogMessageType.TURN_START, message: `Turn ${actionData.turn}` });\n        }\n\n        const announcement =\n          currentState.perform_action(actionData.actingIndex, actionData.selectedAction) ?? \"\";\n\n        setPlayerStates([...currentState.player_states]);\n\n        var action_emoji = \"🪄\";\n        switch (actionData.selectedAction.action_type.name) {\n          case \"HEAL\":\n            action_emoji = \"🍃\";\n            break;\n          case \"DEFEND\":\n            action_emoji = \"🛡️\";\n            break;\n          case \"CAST_SPELL\":\n            switch(actionData.selectedAction.spell_type) {\n                case SpellType.DAMAGE:\n                    action_emoji = \"💥\";\n                    break;\n                case SpellType.BUFF:\n                    action_emoji = \"📈\";\n                    break;\n                case SpellType.DEBUFF:\n                    action_emoji = \"📉\";\n                    break;\n            }\n            break;\n          case \"PASS\":\n            action_emoji = \"✋\";\n            break;\n        }\n        appendToLog({ type: BattleLogMessageType.PLAYER_ACTION, message: `${action_emoji} ${announcement}\\n` });\n\n        const winnerAfterAction = currentState.get_winner?.();\n        if (winnerAfterAction) {\n          winnerRef.current = winnerAfterAction;\n          continueBattle = false;\n          setWinner(winnerAfterAction);\n          appendToLog({ type: BattleLogMessageType.WINNER, message: `${winnerAfterAction.name} wins!` });\n        } else {\n          actingIndexRef.current = 1 - actionData.actingIndex;\n          if (actingIndexRef.current === 0) {\n            const manaBefore = currentState.player_states.map((state) => state.current_mana);\n            currentState.increment_mana?.();\n            const updatedStates = [...currentState.player_states];\n            setPlayerStates(updatedStates);\n            const manaGains = updatedStates.map((state, idx) => Math.max(0, state.current_mana - manaBefore[idx]));\n            appendToLog({\n              type: BattleLogMessageType.TURN_END,\n              message: `End turn ${actionData.turn}, ${updatedStates[0].player.wizard.name} gets ${manaGains[0]} mana, ${updatedStates[1].player.wizard.name} gets ${manaGains[1]} mana\\n`,\n            });\n            turnRef.current = actionData.turn + 1;\n          }\n        }\n      } catch (error) {\n        continueBattle = false;\n        appendToLog({ type: BattleLogMessageType.ERROR, message: `Action failed: ${String(error)}` });\n      } finally {\n        setIsExecutingAction(false);\n        isExecutingActionRef.current = false;\n\n        if (continueBattle && !cancelledRef.current) {\n          fetchActionForCurrentActor(autoProgressRef.current);\n        }\n      }\n    },\n    [appendToLog, fetchActionForCurrentActor]\n  );\n\n  useEffect(() => {\n    if (!pendingAction || winnerRef.current || isExecutingActionRef.current) {\n      return;\n    }\n\n    if (shouldAutoResolve || autoProgress) {\n      setShouldAutoResolve(false);\n      executeAction(pendingAction);\n    }\n  }, [pendingAction, shouldAutoResolve, autoProgress, executeAction]);\n\n  useEffect(() => {\n    if (!pendingAction && shouldAutoResolve) {\n      setShouldAutoResolve(false);\n    }\n  }, [pendingAction, shouldAutoResolve]);\n\n  useEffect(() => {\n    if (!autoProgress || winnerRef.current) {\n      return;\n    }\n    if (pendingActionRef.current || isFetchingActionRef.current) {\n      return;\n    }\n    fetchActionForCurrentActor(true);\n  }, [autoProgress, fetchActionForCurrentActor]);\n\n  useEffect(() => {\n    if (!playerOneWizard || !playerTwoWizard) {\n      return undefined;\n    }\n\n    cancelledRef.current = false;\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n      controllerRef.current = null;\n    }\n\n    const state = new GameState();\n    state.initialize(playerOneWizard, playerTwoWizard);\n    gameStateRef.current = state;\n\n    actingIndexRef.current = 0;\n    turnRef.current = 1;\n\n    winnerRef.current = null;\n    autoProgressRef.current = false;\n    pendingActionRef.current = null;\n    isFetchingActionRef.current = false;\n    isExecutingActionRef.current = false;\n\n    setPlayerStates([...state.player_states]);\n    setBattleLog([]);\n    setWinner(null);\n    setAutoProgress(false);\n    setPendingAction(null);\n    setIsFetchingAction(false);\n    setIsExecutingAction(false);\n    setShouldAutoResolve(false);\n\n    fetchActionForCurrentActor(true);\n\n    return () => {\n      cancelledRef.current = true;\n      if (controllerRef.current) {\n        controllerRef.current.abort();\n        controllerRef.current = null;\n      }\n    };\n  }, [playerOneWizard, playerTwoWizard, fetchActionForCurrentActor]);\n\n  const handleNextMove = useCallback(() => {\n    if (\n      !pendingAction ||\n      autoProgress ||\n      winner ||\n      isFetchingAction ||\n      isExecutingAction ||\n      cancelledRef.current\n    ) {\n      return;\n    }\n\n    executeAction(pendingAction);\n  }, [pendingAction, autoProgress, winner, isFetchingAction, isExecutingAction, executeAction]);\n\n  const toggleAutoProgress = useCallback(() => {\n    if (winner) {\n      return;\n    }\n    setAutoProgress((prev) => {\n      const nextValue = !prev;\n      if (!nextValue) {\n        const actionData = pendingActionRef.current;\n        if (\n          actionData &&\n          !winnerRef.current &&\n          !isFetchingActionRef.current &&\n          !isExecutingActionRef.current\n        ) {\n          setPendingAction(actionData);\n        }\n      } else if (!pendingActionRef.current && !isFetchingActionRef.current) {\n        fetchActionForCurrentActor(true);\n      }\n      return nextValue;\n    });\n  }, [winner, fetchActionForCurrentActor]);\n\n  const playerOneState = playerStates[0] ?? null;\n  const playerTwoState = playerStates[1] ?? null;\n\n  const playerOneDescription = playerOneState?.player?.wizard?.original_description ?? descriptionsRef.current.playerOne;\n  const playerTwoDescription = playerTwoState?.player?.wizard?.original_description ?? descriptionsRef.current.playerTwo;\n\n  const nextMoveDisabled =\n    !!winner || autoProgress || isFetchingAction || isExecutingAction || !pendingAction;\n  const autoProgressDisabled = !!winner;\n  const autoProgressButtonClass = `prompt-button battle-controls__secondary ${\n    autoProgress ? \"\" : \"button-outline\"\n  }`;\n  const nextMoveLabel = !autoProgress && isFetchingAction ? \"Generating move...\" : \"Next Move\";\n\n  return (\n    <section className=\"battle-layout\">\n      {playerOneState && (\n        <BattleColumn\n          wizardState={playerOneState}\n          actions={formatActions(playerOneState.player.wizard, playerOneState.current_mana)}\n          description={playerOneDescription}\n        />\n      )}\n\n      <section className=\"battle-log\">\n        <button className=\"prompt-button button-outline battle-reset\" type=\"button\" onClick={onReset}>\n          Start Over\n        </button>\n        <div className=\"battle-controls\">\n          <button\n            className=\"prompt-button battle-controls__primary\"\n            type=\"button\"\n            onClick={handleNextMove}\n            disabled={nextMoveDisabled}\n          >\n            {nextMoveLabel}\n          </button>\n          <button\n            className={autoProgressButtonClass}\n            type=\"button\"\n            onClick={toggleAutoProgress}\n            disabled={autoProgressDisabled}\n          >\n            {`Auto Progress: ${autoProgress ? \"On\" : \"Off\"}`}\n          </button>\n        </div>\n        <div className=\"battle-log__content\">\n          <h2>Battle Log</h2>\n          {autoProgress && isFetchingAction && generatingWizardName && (\n            <p className=\"battle-log__status\">{`Generating ${generatingWizardName}'s move...`}</p>\n          )}\n          {battleLog.length === 0 ? (\n            <p className=\"battle-log__empty\">\n              {isFetchingAction ? \"Resolving first move...\" : \"Waiting for battle events...\"}\n            </p>\n          ) : (\n            battleLog.map((entry, index) => {\n\n                var entryClass = \"battle-log__entry\";\n                switch (entry.type) {\n                    case BattleLogMessageType.PLAYER_ACTION:\n                        entryClass = \"battle-log__entry\";\n                        break;\n                    case BattleLogMessageType.WINNER:\n                        entryClass = \"battle-log__entry--WINNER\";\n                        break;\n                    case BattleLogMessageType.TURN_START:\n                        entryClass = \"battle-log__entry--turn-start\";\n                        break;\n                    case BattleLogMessageType.TURN_END:\n                        entryClass = \"battle-log__entry--turn-end\";\n                        break;\n                    case BattleLogMessageType.ERROR:\n                        entryClass = \"battle-log__entry--error\";\n                        break;\n                }\n\n              return (\n                <div key={index}>\n                  <h1 className={entryClass}>{entry.message}</h1>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </section>\n\n      {playerTwoState && (\n        <BattleColumn\n          wizardState={playerTwoState}\n          actions={formatActions(playerTwoState.player.wizard, playerTwoState.current_mana)}\n          description={playerTwoDescription}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Battle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}